# Makefile.in generated by automake 1.15.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2017 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/enigma
pkgincludedir = $(includedir)/enigma
pkglibdir = $(libdir)/enigma
pkglibexecdir = $(libexecdir)/enigma
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-none
host_triplet = mipsel-buildroot-linux-uclibc
target_triplet = mipsel-buildroot-linux-uclibc
bin_PROGRAMS = enigma$(EXEEXT)
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/codeset.m4 \
	$(top_srcdir)/m4/gettext.m4 $(top_srcdir)/m4/glibc21.m4 \
	$(top_srcdir)/m4/iconv.m4 $(top_srcdir)/m4/intdiv0.m4 \
	$(top_srcdir)/m4/intmax.m4 $(top_srcdir)/m4/inttypes-pri.m4 \
	$(top_srcdir)/m4/inttypes.m4 $(top_srcdir)/m4/inttypes_h.m4 \
	$(top_srcdir)/m4/isc-posix.m4 $(top_srcdir)/m4/lcmessage.m4 \
	$(top_srcdir)/m4/lib-ld.m4 $(top_srcdir)/m4/lib-link.m4 \
	$(top_srcdir)/m4/lib-prefix.m4 $(top_srcdir)/m4/longdouble.m4 \
	$(top_srcdir)/m4/longlong.m4 $(top_srcdir)/m4/nls.m4 \
	$(top_srcdir)/m4/po.m4 $(top_srcdir)/m4/printf-posix.m4 \
	$(top_srcdir)/m4/progtest.m4 $(top_srcdir)/m4/signed.m4 \
	$(top_srcdir)/m4/size_max.m4 $(top_srcdir)/m4/stdint_h.m4 \
	$(top_srcdir)/m4/uintmax_t.m4 $(top_srcdir)/m4/ulonglong.m4 \
	$(top_srcdir)/m4/wchar_t.m4 $(top_srcdir)/m4/wint_t.m4 \
	$(top_srcdir)/m4/xsize.m4 $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_enigma_OBJECTS = actors.$(OBJEXT) AttributeDescriptor.$(OBJEXT) \
	client.$(OBJEXT) DOMErrorReporter.$(OBJEXT) \
	DOMSchemaResolver.$(OBJEXT) d_models.$(OBJEXT) \
	display.$(OBJEXT) enigma.$(OBJEXT) file.$(OBJEXT) \
	file_zip.$(OBJEXT) floors.$(OBJEXT) game.$(OBJEXT) \
	GridObject.$(OBJEXT) Inventory.$(OBJEXT) items.$(OBJEXT) \
	KindDescriptor.$(OBJEXT) laser.$(OBJEXT) LocalToXML.$(OBJEXT) \
	lua.$(OBJEXT) lua-display.$(OBJEXT) lua-enigma.$(OBJEXT) \
	lua-global.$(OBJEXT) lua-ecl.$(OBJEXT) main.$(OBJEXT) \
	MessageDescriptor.$(OBJEXT) netgame.$(OBJEXT) \
	network.$(OBJEXT) nls.$(OBJEXT) Object.$(OBJEXT) \
	ObjectValidator.$(OBJEXT) oxyd.$(OBJEXT) ox_extra.$(OBJEXT) \
	ox_magnum.$(OBJEXT) ox_oxyd1.$(OBJEXT) ox_peroxyd.$(OBJEXT) \
	options.$(OBJEXT) player.$(OBJEXT) PreferenceManager.$(OBJEXT) \
	PropertyManager.$(OBJEXT) server.$(OBJEXT) \
	SoundEffectManager.$(OBJEXT) SoundEngine.$(OBJEXT) \
	MusicManager.$(OBJEXT) StateObject.$(OBJEXT) \
	StateManager.$(OBJEXT) stones.$(OBJEXT) Utf8ToXML.$(OBJEXT) \
	util.$(OBJEXT) utilXML.$(OBJEXT) Value.$(OBJEXT) \
	video.$(OBJEXT) WorldProxy.$(OBJEXT) world.$(OBJEXT) \
	XMLtoLocal.$(OBJEXT) XMLtoUtf8.$(OBJEXT) Balls.$(OBJEXT) \
	BugActor.$(OBJEXT) HorseActor.$(OBJEXT) KillerActor.$(OBJEXT) \
	Rotors.$(OBJEXT) BridgeFloor.$(OBJEXT) FloodStream.$(OBJEXT) \
	ScalesFloor.$(OBJEXT) SimpleFloors.$(OBJEXT) \
	SlopeFloor.$(OBJEXT) StandardFloors.$(OBJEXT) \
	ThiefFloor.$(OBJEXT) ErrorMenu.$(OBJEXT) GameMenu.$(OBJEXT) \
	HelpMenu.$(OBJEXT) InfoMenu.$(OBJEXT) LevelInspector.$(OBJEXT) \
	LevelMenu.$(OBJEXT) LevelPackComposer.$(OBJEXT) \
	LevelPackConfig.$(OBJEXT) LevelPackMenu.$(OBJEXT) \
	LevelPreviewCache.$(OBJEXT) LevelWidget.$(OBJEXT) \
	LPGroupConfig.$(OBJEXT) MainMenu.$(OBJEXT) Menu.$(OBJEXT) \
	MonospacedLabel.$(OBJEXT) OptionsMenu.$(OBJEXT) \
	ScreenshotViewer.$(OBJEXT) SearchMenu.$(OBJEXT) \
	TextField.$(OBJEXT) widgets.$(OBJEXT) BagItem.$(OBJEXT) \
	BrakeItem.$(OBJEXT) BlockerItem.$(OBJEXT) Bomb.$(OBJEXT) \
	Bottle.$(OBJEXT) BurnableItem.$(OBJEXT) Coin.$(OBJEXT) \
	CompatibilityItems.$(OBJEXT) Crack.$(OBJEXT) \
	CrossItem.$(OBJEXT) DocumentItem.$(OBJEXT) Drop.$(OBJEXT) \
	Dynamite.$(OBJEXT) Extinguisher.$(OBJEXT) ExtraLife.$(OBJEXT) \
	GlassesItem.$(OBJEXT) Hammer.$(OBJEXT) Landmine.$(OBJEXT) \
	Magnet.$(OBJEXT) Meditation.$(OBJEXT) PipeItem.$(OBJEXT) \
	PullerItem.$(OBJEXT) RubberbandItem.$(OBJEXT) \
	SeedItem.$(OBJEXT) Sensor.$(OBJEXT) ShogunDot.$(OBJEXT) \
	SimpleItems.$(OBJEXT) StripItem.$(OBJEXT) \
	SurpriseItem.$(OBJEXT) Sword.$(OBJEXT) TrapItem.$(OBJEXT) \
	Trigger.$(OBJEXT) Umbrella.$(OBJEXT) Vortex.$(OBJEXT) \
	WormHole.$(OBJEXT) Index.$(OBJEXT) RatingManager.$(OBJEXT) \
	PersistentIndex.$(OBJEXT) Proxy.$(OBJEXT) \
	ScoreManager.$(OBJEXT) SubProxy.$(OBJEXT) \
	VolatileIndex.$(OBJEXT) CannonBall.$(OBJEXT) \
	CounterGadget.$(OBJEXT) Other.$(OBJEXT) Rubberband.$(OBJEXT) \
	TimerGadget.$(OBJEXT) Wire.$(OBJEXT) \
	ActorImpulseStone.$(OBJEXT) BarrierStone.$(OBJEXT) \
	BlockerStone.$(OBJEXT) BoulderStone.$(OBJEXT) \
	BrakeStone.$(OBJEXT) BreakStone.$(OBJEXT) \
	ChameleonStone.$(OBJEXT) ChessStone.$(OBJEXT) \
	ClusterStone.$(OBJEXT) CoinSlot.$(OBJEXT) \
	CompatibilityStones.$(OBJEXT) DeathStone.$(OBJEXT) \
	DiscoStone.$(OBJEXT) DispenserStone.$(OBJEXT) Door.$(OBJEXT) \
	FakeStone.$(OBJEXT) FlatStone.$(OBJEXT) BoxStone.$(OBJEXT) \
	FloppySwitch.$(OBJEXT) FourSwitch.$(OBJEXT) \
	GhostStone.$(OBJEXT) GlassStones.$(OBJEXT) \
	GreenBrownStone.$(OBJEXT) IceBlock.$(OBJEXT) \
	JambStone.$(OBJEXT) KeySwitch.$(OBJEXT) KnightStone.$(OBJEXT) \
	LaserStone.$(OBJEXT) LaserSwitch.$(OBJEXT) \
	LightPassengerStone.$(OBJEXT) MagicStone.$(OBJEXT) \
	MailStone.$(OBJEXT) MirrorStone.$(OBJEXT) \
	MonoFlopStone.$(OBJEXT) OneWayStone.$(OBJEXT) \
	OxydStone.$(OBJEXT) PassageStone.$(OBJEXT) \
	PlasterStone.$(OBJEXT) PolarSwitchStone.$(OBJEXT) \
	PortalStone.$(OBJEXT) PullStone.$(OBJEXT) \
	PuzzleStone.$(OBJEXT) QuakeStone.$(OBJEXT) \
	RotatorStone.$(OBJEXT) RubberbandStone.$(OBJEXT) \
	ScissorsStone.$(OBJEXT) ShogunStone.$(OBJEXT) \
	SimpleStones.$(OBJEXT) SpitterStone.$(OBJEXT) \
	StandardStones.$(OBJEXT) StoneImpulse.$(OBJEXT) \
	SurpriseStone.$(OBJEXT) SwapStone.$(OBJEXT) Switch.$(OBJEXT) \
	ThiefStone.$(OBJEXT) TimerStone.$(OBJEXT) Turnstile.$(OBJEXT) \
	VolcanoStone.$(OBJEXT) WindowStone.$(OBJEXT) \
	YieldingStone.$(OBJEXT)
enigma_OBJECTS = $(am_enigma_OBJECTS)
#am__DEPENDENCIES_1 = enigma_ico.o
enigma_DEPENDENCIES = $(top_builddir)/lib-src/enigma-core/libecl.a \
	$(top_builddir)/lib-src/lua/liblua.a \
	$(top_builddir)/lib-src/enet/libenet.a \
	$(top_builddir)/lib-src/oxydlib/liboxyd.a \
	$(top_builddir)/lib-src/zipios++/src/libzipios.a \
	$(am__DEPENDENCIES_1)
enigma_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(enigma_LDFLAGS) \
	$(LDFLAGS) -o $@
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(enigma_SOURCES)
DIST_SOURCES = $(enigma_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/depcomp $(top_srcdir)/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /opt/Enigma-for-GCWZero/missing --run aclocal-1.11
ALLOCA = 
ALL_LINGUAS = de fr nl it es sv ru hu pt fi uk be el pl cs gd hr sk da
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = ${SHELL} /opt/Enigma-for-GCWZero/missing --run autoconf
AUTOHEADER = ${SHELL} /opt/Enigma-for-GCWZero/missing --run autoheader
AUTOMAKE = ${SHELL} /opt/Enigma-for-GCWZero/missing --run automake-1.11
AWK = gawk
BUILD_INCLUDED_LIBINTL = no
CATOBJEXT = .gmo
CC = mipsel-buildroot-linux-uclibc-gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CONVERT = /usr/bin/convert
CPP = mipsel-buildroot-linux-uclibc-gcc -E
CPPFLAGS = 
CXX = mipsel-buildroot-linux-uclibc-g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -DENABLE_ASSERT -g -DCXXLUA\
	-DSYSTEM_DATA_DIR=\"$(datadir)/enigma\" \
	-DDOCDIR=\"$(docdir)\" \
	-DLOCALEDIR=\"$(localedir_enigma)\" \
	-I$(top_srcdir)/lib-src/zipios++  \
	-I$(top_builddir)/lib-src/zipios++ \
	-I$(top_srcdir)/lib-src/lua \
	-I$(top_srcdir)/lib-src/enigma-core \
	-I$(top_srcdir)/lib-src/enet/include \
	-I$(top_srcdir)/lib-src \
	-I$(top_builddir)/intl -I/opt/buildroot/output/host/mipsel-buildroot-linux-uclibc/sysroot/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT

CYGPATH_W = echo
DATADIRNAME = share
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
GENCAT = gencat
GLIBC21 = yes
GMSGFMT = /usr/bin/msgfmt
GREP = /usr/bin/grep
HAVE_ASPRINTF = 1
HAVE_POSIX_PRINTF = 1
HAVE_SNPRINTF = 1
HAVE_WPRINTF = 0
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLBISON = :
INTLLIBS = -lintl
INTLOBJS = 
INTL_LIBTOOL_SUFFIX_PREFIX = 
LDFLAGS = 
LIBICONV = -liconv
LIBINTL = -lintl
LIBOBJS = 
LIBS = -lcurl -lxerces-c -lpng 
LTLIBICONV = -liconv
LTLIBINTL = -lintl
LTLIBOBJS = 
MAKEINFO = ${SHELL} /opt/Enigma-for-GCWZero/missing --run makeinfo
MKDIR_P = /usr/bin/mkdir -p
MKINSTALLDIRS = $(top_builddir)/./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
MSGMERGE = /usr/bin/msgmerge
OBJEXT = o
PACKAGE = enigma
PACKAGE_BUGREPORT = 
PACKAGE_NAME = enigma
PACKAGE_STRING = enigma 1.21
PACKAGE_TARNAME = enigma
PACKAGE_URL = 
PACKAGE_VERSION = 1.21
PATH_SEPARATOR = :
PDFLATEX = 
POSUB = po
RANLIB = mipsel-buildroot-linux-uclibc-ranlib
SDL_CFLAGS = -I/opt/buildroot/output/host/mipsel-buildroot-linux-uclibc/sysroot/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_LIBS = -L/opt/buildroot/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr/lib -lSDL -lpthread -lSDL_image -lSDL_mixer -lSDL_ttf
SET_MAKE = 
SHELL = /bin/bash
STRIP = mipsel-buildroot-linux-uclibc-strip
TEXI2HTML = 

# Rule for creating Lua interfaces from package descriptions using 'tolua'
TOLUA = $(top_builddir)/tools/tolua
USE_INCLUDED_LIBINTL = no
USE_NLS = yes
VERSION = 1.21
WINDRES = windres
XGETTEXT = /usr/bin/xgettext
abs_builddir = /opt/Enigma-for-GCWZero/src
abs_srcdir = /opt/Enigma-for-GCWZero/src
abs_top_builddir = /opt/Enigma-for-GCWZero
abs_top_srcdir = /opt/Enigma-for-GCWZero
ac_ct_CC = 
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-none
build_alias = x86_64
build_cpu = x86_64
build_os = none
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = mipsel-buildroot-linux-uclibc
host_alias = mipsel-buildroot-linux-uclibc
host_cpu = mipsel
host_os = linux-uclibc
host_vendor = buildroot
htmldir = ${docdir}
includedir = /opt/buildroot/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /opt/Enigma-for-GCWZero/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /usr/bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /opt/buildroot/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
subdirs =  lib-src/zipios++ lib-src/enet
sysconfdir = /opt/buildroot/output/host/etc
target = mipsel-buildroot-linux-uclibc
target_alias = 
target_cpu = mipsel
target_os = linux-uclibc
target_vendor = buildroot
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
EXTRA_DIST = \
	enigma.ico \
	enigma.rc

enigma_SOURCES = \
	actors.hh 		\
	actors.cc 		\
	actors_internal.hh	\
	AttributeDescriptor.cc	\
	AttributeDescriptor.hh	\
	client.cc 		\
	client.hh 		\
	client_internal.hh	\
	DOMErrorReporter.hh     \
	DOMErrorReporter.cc     \
	DOMSchemaResolver.cc	\
	DOMSchemaResolver.hh	\
	d_models.cc 		\
	d_models.hh		\
	display.hh 		\
	display.cc 		\
	display_internal.hh	\
	d_engine.hh		\
	enigma.cc 		\
	enigma.hh		\
	errors.hh		\
	file.cc 		\
	file.hh 		\
	file_zip.cc 		\
	floors.cc 		\
	floors.hh		\
	fwd.hh			\
	game.cc			\
	game.hh			\
	GridObject.cc 		\
	GridObject.hh 		\
	Inventory.cc		\
	Inventory.hh		\
	ItemHolder.hh		\
	items.cc 		\
	items.hh		\
	KindDescriptor.cc	\
	KindDescriptor.hh	\
	laser.cc 		\
	laser.hh		\
	LocalToXML.cc		\
	LocalToXML.hh		\
	lua.cc 			\
	lua.hh			\
	lua-display.cc 		\
	lua-display.hh		\
	lua-enigma.cc 		\
	lua-enigma.hh		\
	lua-global.cc 		\
	lua-global.hh		\
	lua-ecl.cc 		\
	lua-ecl.hh		\
	main.cc 		\
	main.hh			\
	MessageDescriptor.cc	\
	MessageDescriptor.hh	\
	netgame.cc 		\
	netgame.hh 		\
	network.cc		\
	network.hh		\
	nls.cc 			\
	nls.hh			\
	Object.cc 		\
	Object.hh 		\
	ObjectValidator.cc	\
	ObjectValidator.hh	\
	oxyd.cc			\
	oxyd.hh 		\
	oxyd_internal.hh	\
	ox_extra.cc		\
	ox_magnum.cc		\
	ox_oxyd1.cc		\
	ox_peroxyd.cc		\
	options.cc 		\
	options.hh		\
	player.cc 		\
	player.hh		\
	PreferenceManager.cc	\
	PreferenceManager.hh	\
	PropertyManager.cc	\
	PropertyManager.hh	\
	server.cc 		\
	server.hh		\
	server_internal.hh	\
	SoundEffectManager.cc   \
	SoundEffectManager.hh   \
	SoundEngine.cc          \
	SoundEngine.hh 		\
	MusicManager.cc		\
	MusicManager.hh         \
	StateObject.cc		\
	StateObject.hh		\
	StateManager.cc		\
	StateManager.hh		\
	stones.cc 		\
	stones.hh 		\
	stones_internal.hh 	\
	Utf8ToXML.cc		\
	Utf8ToXML.hh		\
	util.cc 		\
	util.hh			\
	utilXML.cc		\
	utilXML.hh		\
	Value.cc		\
	Value.hh		\
	video.cc 		\
	video.hh		\
	WorldProxy.cc		\
	WorldProxy.hh		\
	world.cc 		\
	world.hh 		\
	world_internal.hh	\
	XMLtoLocal.cc		\
	XMLtoLocal.hh		\
	XMLtoUtf8.cc		\
	XMLtoUtf8.hh		\
	actors/Balls.cc		\
	actors/Balls.hh		\
	actors/BugActor.cc	\
	actors/BugActor.hh	\
	actors/HorseActor.cc	\
	actors/HorseActor.hh	\
	actors/KillerActor.cc	\
	actors/KillerActor.hh	\
	actors/Rotors.cc	\
	actors/Rotors.hh	\
	floors/BridgeFloor.cc	\
	floors/BridgeFloor.hh	\
	floors/FloodStream.cc	\
	floors/FloodStream.hh	\
	floors/ScalesFloor.cc	\
	floors/ScalesFloor.hh	\
	floors/SimpleFloors.cc	\
	floors/SimpleFloors.hh	\
	floors/SlopeFloor.cc	\
	floors/SlopeFloor.hh	\
	floors/StandardFloors.cc	\
	floors/StandardFloors.hh	\
	floors/ThiefFloor.cc	\
	floors/ThiefFloor.hh	\
	gui/ErrorMenu.cc	\
	gui/ErrorMenu.hh	\
	gui/GameMenu.cc		\
	gui/GameMenu.hh		\
	gui/HelpMenu.cc		\
	gui/HelpMenu.hh		\
	gui/InfoMenu.cc		\
	gui/InfoMenu.hh		\
	gui/LevelInspector.cc	\
	gui/LevelInspector.hh	\
	gui/LevelMenu.cc	\
	gui/LevelMenu.hh	\
	gui/LevelPackComposer.cc \
	gui/LevelPackComposer.hh \
	gui/LevelPackConfig.cc	\
	gui/LevelPackConfig.hh	\
	gui/LevelPackMenu.cc	\
	gui/LevelPackMenu.hh	\
	gui/LevelPreviewCache.cc \
	gui/LevelPreviewCache.hh \
	gui/LevelWidget.cc	\
	gui/LevelWidget.hh	\
	gui/LPGroupConfig.cc	\
	gui/LPGroupConfig.hh	\
	gui/MainMenu.cc		\
	gui/MainMenu.hh		\
	gui/Menu.cc		\
	gui/Menu.hh		\
	gui/MonospacedLabel.cc	\
	gui/MonospacedLabel.hh	\
	gui/OptionsMenu.cc	\
	gui/OptionsMenu.hh	\
	gui/ScreenshotViewer.cc	\
	gui/ScreenshotViewer.hh	\
	gui/SearchMenu.cc	\
	gui/SearchMenu.hh	\
	gui/TextField.cc	\
	gui/TextField.hh	\
	gui/widgets.cc		\
	gui/widgets.hh		\
	items/BagItem.cc	\
	items/BagItem.hh	\
	items/BrakeItem.cc	\
	items/BrakeItem.hh	\
	items/BlockerItem.cc	\
	items/BlockerItem.hh	\
	items/Bomb.cc		\
	items/Bomb.hh		\
	items/Bottle.cc		\
	items/Bottle.hh		\
	items/BurnableItem.cc	\
	items/BurnableItem.hh	\
	items/Coin.cc		\
	items/Coin.hh		\
	items/CompatibilityItems.cc	\
	items/CompatibilityItems.hh	\
	items/Crack.cc		\
	items/Crack.hh		\
	items/CrossItem.cc	\
	items/CrossItem.hh	\
	items/DocumentItem.cc	\
	items/DocumentItem.hh	\
	items/Drop.cc		\
	items/Drop.hh		\
	items/Dynamite.cc	\
	items/Dynamite.hh	\
	items/Extinguisher.cc	\
	items/Extinguisher.hh	\
	items/ExtraLife.cc	\
	items/ExtraLife.hh	\
	items/GlassesItem.cc	\
	items/GlassesItem.hh	\
	items/Hammer.cc		\
	items/Hammer.hh		\
	items/Landmine.cc	\
	items/Landmine.hh	\
	items/Magnet.cc		\
	items/Magnet.hh		\
	items/Meditation.cc	\
	items/Meditation.hh	\
	items/PipeItem.cc	\
	items/PipeItem.hh	\
	items/PullerItem.cc	\
	items/PullerItem.hh	\
	items/RubberbandItem.cc	\
	items/RubberbandItem.hh	\
	items/SeedItem.cc	\
	items/SeedItem.hh	\
	items/Sensor.cc		\
	items/Sensor.hh		\
	items/ShogunDot.cc	\
	items/ShogunDot.hh	\
	items/SimpleItems.cc	\
	items/SimpleItems.hh	\
	items/StripItem.cc	\
	items/StripItem.hh	\
	items/SurpriseItem.cc	\
	items/SurpriseItem.hh	\
	items/Sword.cc		\
	items/Sword.hh		\
	items/TrapItem.cc	\
	items/TrapItem.hh	\
	items/Trigger.cc	\
	items/Trigger.hh	\
	items/Umbrella.cc	\
	items/Umbrella.hh	\
	items/Vortex.cc		\
	items/Vortex.hh		\
	items/WormHole.cc	\
	items/WormHole.hh	\
	lev/Index.cc		\
	lev/Index.hh		\
	lev/RatingManager.cc	\
	lev/RatingManager.hh	\
	lev/PersistentIndex.cc	\
	lev/PersistentIndex.hh	\
	lev/Proxy.cc		\
	lev/Proxy.hh		\
	lev/ScoreManager.cc	\
	lev/ScoreManager.hh	\
	lev/SubProxy.cc		\
	lev/SubProxy.hh		\
	lev/VolatileIndex.cc	\
	lev/VolatileIndex.hh	\
	others/CannonBall.cc	\
	others/CannonBall.hh	\
	others/CounterGadget.cc	\
	others/CounterGadget.hh	\
	others/Other.cc		\
	others/Other.hh		\
	others/Rubberband.cc	\
	others/Rubberband.hh	\
	others/TimerGadget.cc	\
	others/TimerGadget.hh	\
	others/Wire.cc		\
	others/Wire.hh		\
	stones/ActorImpulseStone.cc	\
	stones/ActorImpulseStone.hh	\
	stones/BarrierStone.cc   \
	stones/BarrierStone.hh   \
	stones/BlockerStone.cc	\
	stones/BlockerStone.hh	\
	stones/BoulderStone.cc	\
	stones/BoulderStone.hh	\
	stones/BrakeStone.cc	\
	stones/BrakeStone.hh	\
	stones/BreakStone.cc	\
	stones/BreakStone.hh	\
	stones/ChameleonStone.cc	\
	stones/ChameleonStone.hh	\
	stones/ChessStone.cc	\
	stones/ChessStone.hh	\
	stones/ClusterStone.cc	\
	stones/ClusterStone.hh	\
	stones/CoinSlot.cc	\
	stones/CoinSlot.hh	\
	stones/CompatibilityStones.cc	\
	stones/CompatibilityStones.hh	\
	stones/DeathStone.cc	\
	stones/DeathStone.hh	\
	stones/DiscoStone.cc	\
	stones/DiscoStone.hh	\
	stones/DispenserStone.cc	\
	stones/DispenserStone.hh	\
	stones/Door.cc		\
	stones/Door.hh		\
	stones/FakeStone.cc	\
	stones/FakeStone.hh	\
	stones/FlatStone.cc	\
	stones/FlatStone.hh	\
	stones/BoxStone.cc	\
	stones/BoxStone.hh	\
	stones/FloppySwitch.cc	\
	stones/FloppySwitch.hh	\
	stones/FourSwitch.cc	\
	stones/FourSwitch.hh	\
	stones/GhostStone.cc	\
	stones/GhostStone.hh	\
	stones/GlassStones.cc	\
	stones/GlassStones.hh	\
	stones/GreenBrownStone.cc	\
	stones/GreenBrownStone.hh	\
	stones/IceBlock.cc	\
	stones/IceBlock.hh	\
	stones/JambStone.cc	\
	stones/JambStone.hh	\
	stones/KeySwitch.cc	\
	stones/KeySwitch.hh	\
	stones/KnightStone.cc	\
	stones/KnightStone.hh	\
	stones/LaserStone.cc	\
	stones/LaserStone.hh	\
	stones/LaserSwitch.cc	\
	stones/LaserSwitch.hh	\
	stones/LightPassengerStone.cc	\
	stones/LightPassengerStone.hh	\
	stones/MagicStone.cc	\
	stones/MagicStone.hh	\
	stones/MailStone.cc	\
	stones/MailStone.hh	\
	stones/MirrorStone.cc	\
	stones/MirrorStone.hh	\
	stones/MonoFlopStone.cc	\
	stones/MonoFlopStone.hh	\
	stones/OneWayStone.cc	\
	stones/OneWayStone.hh	\
	stones/OxydStone.cc	\
	stones/OxydStone.hh	\
	stones/PassageStone.cc	\
	stones/PassageStone.hh	\
	stones/PlasterStone.cc	\
	stones/PlasterStone.hh	\
	stones/PolarSwitchStone.cc	\
	stones/PolarSwitchStone.hh	\
	stones/PortalStone.cc	\
	stones/PortalStone.hh	\
	stones/PullStone.cc	\
	stones/PullStone.hh	\
	stones/PuzzleStone.cc	\
	stones/PuzzleStone.hh	\
	stones/QuakeStone.cc	\
	stones/QuakeStone.hh	\
	stones/RotatorStone.cc	\
	stones/RotatorStone.hh	\
	stones/RubberbandStone.cc	\
	stones/RubberbandStone.hh	\
	stones/ScissorsStone.cc	\
	stones/ScissorsStone.hh	\
	stones/ShogunStone.cc	\
	stones/ShogunStone.hh	\
	stones/SimpleStones.cc	\
	stones/SimpleStones.hh	\
	stones/SpitterStone.cc	\
	stones/SpitterStone.hh	\
	stones/StandardStones.cc	\
	stones/StandardStones.hh	\
	stones/StoneImpulse.cc	\
	stones/StoneImpulse.hh	\
	stones/SurpriseStone.cc	\
	stones/SurpriseStone.hh	\
	stones/SwapStone.cc	\
	stones/SwapStone.hh	\
	stones/Switch.cc	\
	stones/Switch.hh	\
	stones/ThiefStone.cc	\
	stones/ThiefStone.hh	\
	stones/TimerStone.cc	\
	stones/TimerStone.hh	\
	stones/Turnstile.cc	\
	stones/Turnstile.hh	\
	stones/VolcanoStone.cc	\
	stones/VolcanoStone.hh	\
	stones/WindowStone.cc	\
	stones/WindowStone.hh	\
	stones/YieldingStone.cc	\
	stones/YieldingStone.hh

localedir_enigma := $(datadir)/locale
#localedir_enigma := data/locale
mingw_ldadd = 
#mingw_ldadd := enigma_ico.o -lws2_32 -lSDL_image -ltiff -llzma -ljpeg -lpng15 -lSDL_mixer -lmikmod -lsmpeg -lstdc++ -lvorbisfile -lvorbis -logg -lSDL_ttf -lcurl -lidn -lwldap32 -lgnutls -lhogweed -lgmp -lz -lnettle -lssh2 -lgcrypt -lgpg-error -lws2_32 -lfreetype -lintl
#enigma_LDFLAGS := -mwindows -pthread
enigma_LDADD = \
	-lintl \
	$(top_builddir)/lib-src/enigma-core/libecl.a \
	$(top_builddir)/lib-src/lua/liblua.a \
	$(top_builddir)/lib-src/enet/libenet.a \
	$(top_builddir)/lib-src/oxydlib/liboxyd.a \
	$(top_builddir)/lib-src/zipios++/src/libzipios.a \
	-lz \
	$(mingw_ldadd) \
	-L/opt/buildroot/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr/lib -lSDL -lpthread -lSDL_image -lSDL_mixer -lSDL_ttf


#------------------ Packaging rules for Mac OSX ------------------------
bundle_root := $(top_builddir)/etc/macfiles
bundle_name := $(bundle_root)/Enigma.app

# Special target to copy the doc files to the MacOS dmg staging area
bundle_doc := $(bundle_name)/Contents/Resources/doc

# Special target to create a binary linked with Mac OS X frameworks
# note this assumes that xercesc and libpng are installed in same directory as the SDL libraries.
static_prefix := `$(SDL_CONFIG) --prefix`
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

enigma$(EXEEXT): $(enigma_OBJECTS) $(enigma_DEPENDENCIES) $(EXTRA_enigma_DEPENDENCIES) 
	@rm -f enigma$(EXEEXT)
	$(AM_V_CXXLD)$(enigma_LINK) $(enigma_OBJECTS) $(enigma_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ActorImpulseStone.Po
include ./$(DEPDIR)/AttributeDescriptor.Po
include ./$(DEPDIR)/BagItem.Po
include ./$(DEPDIR)/Balls.Po
include ./$(DEPDIR)/BarrierStone.Po
include ./$(DEPDIR)/BlockerItem.Po
include ./$(DEPDIR)/BlockerStone.Po
include ./$(DEPDIR)/Bomb.Po
include ./$(DEPDIR)/Bottle.Po
include ./$(DEPDIR)/BoulderStone.Po
include ./$(DEPDIR)/BoxStone.Po
include ./$(DEPDIR)/BrakeItem.Po
include ./$(DEPDIR)/BrakeStone.Po
include ./$(DEPDIR)/BreakStone.Po
include ./$(DEPDIR)/BridgeFloor.Po
include ./$(DEPDIR)/BugActor.Po
include ./$(DEPDIR)/BurnableItem.Po
include ./$(DEPDIR)/CannonBall.Po
include ./$(DEPDIR)/ChameleonStone.Po
include ./$(DEPDIR)/ChessStone.Po
include ./$(DEPDIR)/ClusterStone.Po
include ./$(DEPDIR)/Coin.Po
include ./$(DEPDIR)/CoinSlot.Po
include ./$(DEPDIR)/CompatibilityItems.Po
include ./$(DEPDIR)/CompatibilityStones.Po
include ./$(DEPDIR)/CounterGadget.Po
include ./$(DEPDIR)/Crack.Po
include ./$(DEPDIR)/CrossItem.Po
include ./$(DEPDIR)/DOMErrorReporter.Po
include ./$(DEPDIR)/DOMSchemaResolver.Po
include ./$(DEPDIR)/DeathStone.Po
include ./$(DEPDIR)/DiscoStone.Po
include ./$(DEPDIR)/DispenserStone.Po
include ./$(DEPDIR)/DocumentItem.Po
include ./$(DEPDIR)/Door.Po
include ./$(DEPDIR)/Drop.Po
include ./$(DEPDIR)/Dynamite.Po
include ./$(DEPDIR)/ErrorMenu.Po
include ./$(DEPDIR)/Extinguisher.Po
include ./$(DEPDIR)/ExtraLife.Po
include ./$(DEPDIR)/FakeStone.Po
include ./$(DEPDIR)/FlatStone.Po
include ./$(DEPDIR)/FloodStream.Po
include ./$(DEPDIR)/FloppySwitch.Po
include ./$(DEPDIR)/FourSwitch.Po
include ./$(DEPDIR)/GameMenu.Po
include ./$(DEPDIR)/GhostStone.Po
include ./$(DEPDIR)/GlassStones.Po
include ./$(DEPDIR)/GlassesItem.Po
include ./$(DEPDIR)/GreenBrownStone.Po
include ./$(DEPDIR)/GridObject.Po
include ./$(DEPDIR)/Hammer.Po
include ./$(DEPDIR)/HelpMenu.Po
include ./$(DEPDIR)/HorseActor.Po
include ./$(DEPDIR)/IceBlock.Po
include ./$(DEPDIR)/Index.Po
include ./$(DEPDIR)/InfoMenu.Po
include ./$(DEPDIR)/Inventory.Po
include ./$(DEPDIR)/JambStone.Po
include ./$(DEPDIR)/KeySwitch.Po
include ./$(DEPDIR)/KillerActor.Po
include ./$(DEPDIR)/KindDescriptor.Po
include ./$(DEPDIR)/KnightStone.Po
include ./$(DEPDIR)/LPGroupConfig.Po
include ./$(DEPDIR)/Landmine.Po
include ./$(DEPDIR)/LaserStone.Po
include ./$(DEPDIR)/LaserSwitch.Po
include ./$(DEPDIR)/LevelInspector.Po
include ./$(DEPDIR)/LevelMenu.Po
include ./$(DEPDIR)/LevelPackComposer.Po
include ./$(DEPDIR)/LevelPackConfig.Po
include ./$(DEPDIR)/LevelPackMenu.Po
include ./$(DEPDIR)/LevelPreviewCache.Po
include ./$(DEPDIR)/LevelWidget.Po
include ./$(DEPDIR)/LightPassengerStone.Po
include ./$(DEPDIR)/LocalToXML.Po
include ./$(DEPDIR)/MagicStone.Po
include ./$(DEPDIR)/Magnet.Po
include ./$(DEPDIR)/MailStone.Po
include ./$(DEPDIR)/MainMenu.Po
include ./$(DEPDIR)/Meditation.Po
include ./$(DEPDIR)/Menu.Po
include ./$(DEPDIR)/MessageDescriptor.Po
include ./$(DEPDIR)/MirrorStone.Po
include ./$(DEPDIR)/MonoFlopStone.Po
include ./$(DEPDIR)/MonospacedLabel.Po
include ./$(DEPDIR)/MusicManager.Po
include ./$(DEPDIR)/Object.Po
include ./$(DEPDIR)/ObjectValidator.Po
include ./$(DEPDIR)/OneWayStone.Po
include ./$(DEPDIR)/OptionsMenu.Po
include ./$(DEPDIR)/Other.Po
include ./$(DEPDIR)/OxydStone.Po
include ./$(DEPDIR)/PassageStone.Po
include ./$(DEPDIR)/PersistentIndex.Po
include ./$(DEPDIR)/PipeItem.Po
include ./$(DEPDIR)/PlasterStone.Po
include ./$(DEPDIR)/PolarSwitchStone.Po
include ./$(DEPDIR)/PortalStone.Po
include ./$(DEPDIR)/PreferenceManager.Po
include ./$(DEPDIR)/PropertyManager.Po
include ./$(DEPDIR)/Proxy.Po
include ./$(DEPDIR)/PullStone.Po
include ./$(DEPDIR)/PullerItem.Po
include ./$(DEPDIR)/PuzzleStone.Po
include ./$(DEPDIR)/QuakeStone.Po
include ./$(DEPDIR)/RatingManager.Po
include ./$(DEPDIR)/RotatorStone.Po
include ./$(DEPDIR)/Rotors.Po
include ./$(DEPDIR)/Rubberband.Po
include ./$(DEPDIR)/RubberbandItem.Po
include ./$(DEPDIR)/RubberbandStone.Po
include ./$(DEPDIR)/ScalesFloor.Po
include ./$(DEPDIR)/ScissorsStone.Po
include ./$(DEPDIR)/ScoreManager.Po
include ./$(DEPDIR)/ScreenshotViewer.Po
include ./$(DEPDIR)/SearchMenu.Po
include ./$(DEPDIR)/SeedItem.Po
include ./$(DEPDIR)/Sensor.Po
include ./$(DEPDIR)/ShogunDot.Po
include ./$(DEPDIR)/ShogunStone.Po
include ./$(DEPDIR)/SimpleFloors.Po
include ./$(DEPDIR)/SimpleItems.Po
include ./$(DEPDIR)/SimpleStones.Po
include ./$(DEPDIR)/SlopeFloor.Po
include ./$(DEPDIR)/SoundEffectManager.Po
include ./$(DEPDIR)/SoundEngine.Po
include ./$(DEPDIR)/SpitterStone.Po
include ./$(DEPDIR)/StandardFloors.Po
include ./$(DEPDIR)/StandardStones.Po
include ./$(DEPDIR)/StateManager.Po
include ./$(DEPDIR)/StateObject.Po
include ./$(DEPDIR)/StoneImpulse.Po
include ./$(DEPDIR)/StripItem.Po
include ./$(DEPDIR)/SubProxy.Po
include ./$(DEPDIR)/SurpriseItem.Po
include ./$(DEPDIR)/SurpriseStone.Po
include ./$(DEPDIR)/SwapStone.Po
include ./$(DEPDIR)/Switch.Po
include ./$(DEPDIR)/Sword.Po
include ./$(DEPDIR)/TextField.Po
include ./$(DEPDIR)/ThiefFloor.Po
include ./$(DEPDIR)/ThiefStone.Po
include ./$(DEPDIR)/TimerGadget.Po
include ./$(DEPDIR)/TimerStone.Po
include ./$(DEPDIR)/TrapItem.Po
include ./$(DEPDIR)/Trigger.Po
include ./$(DEPDIR)/Turnstile.Po
include ./$(DEPDIR)/Umbrella.Po
include ./$(DEPDIR)/Utf8ToXML.Po
include ./$(DEPDIR)/Value.Po
include ./$(DEPDIR)/VolatileIndex.Po
include ./$(DEPDIR)/VolcanoStone.Po
include ./$(DEPDIR)/Vortex.Po
include ./$(DEPDIR)/WindowStone.Po
include ./$(DEPDIR)/Wire.Po
include ./$(DEPDIR)/WorldProxy.Po
include ./$(DEPDIR)/WormHole.Po
include ./$(DEPDIR)/XMLtoLocal.Po
include ./$(DEPDIR)/XMLtoUtf8.Po
include ./$(DEPDIR)/YieldingStone.Po
include ./$(DEPDIR)/actors.Po
include ./$(DEPDIR)/client.Po
include ./$(DEPDIR)/d_models.Po
include ./$(DEPDIR)/display.Po
include ./$(DEPDIR)/enigma.Po
include ./$(DEPDIR)/file.Po
include ./$(DEPDIR)/file_zip.Po
include ./$(DEPDIR)/floors.Po
include ./$(DEPDIR)/game.Po
include ./$(DEPDIR)/items.Po
include ./$(DEPDIR)/laser.Po
include ./$(DEPDIR)/lua-display.Po
include ./$(DEPDIR)/lua-ecl.Po
include ./$(DEPDIR)/lua-enigma.Po
include ./$(DEPDIR)/lua-global.Po
include ./$(DEPDIR)/lua.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/netgame.Po
include ./$(DEPDIR)/network.Po
include ./$(DEPDIR)/nls.Po
include ./$(DEPDIR)/options.Po
include ./$(DEPDIR)/ox_extra.Po
include ./$(DEPDIR)/ox_magnum.Po
include ./$(DEPDIR)/ox_oxyd1.Po
include ./$(DEPDIR)/ox_peroxyd.Po
include ./$(DEPDIR)/oxyd.Po
include ./$(DEPDIR)/player.Po
include ./$(DEPDIR)/server.Po
include ./$(DEPDIR)/stones.Po
include ./$(DEPDIR)/util.Po
include ./$(DEPDIR)/utilXML.Po
include ./$(DEPDIR)/video.Po
include ./$(DEPDIR)/widgets.Po
include ./$(DEPDIR)/world.Po

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

Balls.o: actors/Balls.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Balls.o -MD -MP -MF $(DEPDIR)/Balls.Tpo -c -o Balls.o `test -f 'actors/Balls.cc' || echo '$(srcdir)/'`actors/Balls.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Balls.Tpo $(DEPDIR)/Balls.Po
#	$(AM_V_CXX)source='actors/Balls.cc' object='Balls.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Balls.o `test -f 'actors/Balls.cc' || echo '$(srcdir)/'`actors/Balls.cc

Balls.obj: actors/Balls.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Balls.obj -MD -MP -MF $(DEPDIR)/Balls.Tpo -c -o Balls.obj `if test -f 'actors/Balls.cc'; then $(CYGPATH_W) 'actors/Balls.cc'; else $(CYGPATH_W) '$(srcdir)/actors/Balls.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Balls.Tpo $(DEPDIR)/Balls.Po
#	$(AM_V_CXX)source='actors/Balls.cc' object='Balls.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Balls.obj `if test -f 'actors/Balls.cc'; then $(CYGPATH_W) 'actors/Balls.cc'; else $(CYGPATH_W) '$(srcdir)/actors/Balls.cc'; fi`

BugActor.o: actors/BugActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BugActor.o -MD -MP -MF $(DEPDIR)/BugActor.Tpo -c -o BugActor.o `test -f 'actors/BugActor.cc' || echo '$(srcdir)/'`actors/BugActor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BugActor.Tpo $(DEPDIR)/BugActor.Po
#	$(AM_V_CXX)source='actors/BugActor.cc' object='BugActor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BugActor.o `test -f 'actors/BugActor.cc' || echo '$(srcdir)/'`actors/BugActor.cc

BugActor.obj: actors/BugActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BugActor.obj -MD -MP -MF $(DEPDIR)/BugActor.Tpo -c -o BugActor.obj `if test -f 'actors/BugActor.cc'; then $(CYGPATH_W) 'actors/BugActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/BugActor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BugActor.Tpo $(DEPDIR)/BugActor.Po
#	$(AM_V_CXX)source='actors/BugActor.cc' object='BugActor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BugActor.obj `if test -f 'actors/BugActor.cc'; then $(CYGPATH_W) 'actors/BugActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/BugActor.cc'; fi`

HorseActor.o: actors/HorseActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT HorseActor.o -MD -MP -MF $(DEPDIR)/HorseActor.Tpo -c -o HorseActor.o `test -f 'actors/HorseActor.cc' || echo '$(srcdir)/'`actors/HorseActor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/HorseActor.Tpo $(DEPDIR)/HorseActor.Po
#	$(AM_V_CXX)source='actors/HorseActor.cc' object='HorseActor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o HorseActor.o `test -f 'actors/HorseActor.cc' || echo '$(srcdir)/'`actors/HorseActor.cc

HorseActor.obj: actors/HorseActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT HorseActor.obj -MD -MP -MF $(DEPDIR)/HorseActor.Tpo -c -o HorseActor.obj `if test -f 'actors/HorseActor.cc'; then $(CYGPATH_W) 'actors/HorseActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/HorseActor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/HorseActor.Tpo $(DEPDIR)/HorseActor.Po
#	$(AM_V_CXX)source='actors/HorseActor.cc' object='HorseActor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o HorseActor.obj `if test -f 'actors/HorseActor.cc'; then $(CYGPATH_W) 'actors/HorseActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/HorseActor.cc'; fi`

KillerActor.o: actors/KillerActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KillerActor.o -MD -MP -MF $(DEPDIR)/KillerActor.Tpo -c -o KillerActor.o `test -f 'actors/KillerActor.cc' || echo '$(srcdir)/'`actors/KillerActor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/KillerActor.Tpo $(DEPDIR)/KillerActor.Po
#	$(AM_V_CXX)source='actors/KillerActor.cc' object='KillerActor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KillerActor.o `test -f 'actors/KillerActor.cc' || echo '$(srcdir)/'`actors/KillerActor.cc

KillerActor.obj: actors/KillerActor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KillerActor.obj -MD -MP -MF $(DEPDIR)/KillerActor.Tpo -c -o KillerActor.obj `if test -f 'actors/KillerActor.cc'; then $(CYGPATH_W) 'actors/KillerActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/KillerActor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/KillerActor.Tpo $(DEPDIR)/KillerActor.Po
#	$(AM_V_CXX)source='actors/KillerActor.cc' object='KillerActor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KillerActor.obj `if test -f 'actors/KillerActor.cc'; then $(CYGPATH_W) 'actors/KillerActor.cc'; else $(CYGPATH_W) '$(srcdir)/actors/KillerActor.cc'; fi`

Rotors.o: actors/Rotors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rotors.o -MD -MP -MF $(DEPDIR)/Rotors.Tpo -c -o Rotors.o `test -f 'actors/Rotors.cc' || echo '$(srcdir)/'`actors/Rotors.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Rotors.Tpo $(DEPDIR)/Rotors.Po
#	$(AM_V_CXX)source='actors/Rotors.cc' object='Rotors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rotors.o `test -f 'actors/Rotors.cc' || echo '$(srcdir)/'`actors/Rotors.cc

Rotors.obj: actors/Rotors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rotors.obj -MD -MP -MF $(DEPDIR)/Rotors.Tpo -c -o Rotors.obj `if test -f 'actors/Rotors.cc'; then $(CYGPATH_W) 'actors/Rotors.cc'; else $(CYGPATH_W) '$(srcdir)/actors/Rotors.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Rotors.Tpo $(DEPDIR)/Rotors.Po
#	$(AM_V_CXX)source='actors/Rotors.cc' object='Rotors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rotors.obj `if test -f 'actors/Rotors.cc'; then $(CYGPATH_W) 'actors/Rotors.cc'; else $(CYGPATH_W) '$(srcdir)/actors/Rotors.cc'; fi`

BridgeFloor.o: floors/BridgeFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BridgeFloor.o -MD -MP -MF $(DEPDIR)/BridgeFloor.Tpo -c -o BridgeFloor.o `test -f 'floors/BridgeFloor.cc' || echo '$(srcdir)/'`floors/BridgeFloor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BridgeFloor.Tpo $(DEPDIR)/BridgeFloor.Po
#	$(AM_V_CXX)source='floors/BridgeFloor.cc' object='BridgeFloor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BridgeFloor.o `test -f 'floors/BridgeFloor.cc' || echo '$(srcdir)/'`floors/BridgeFloor.cc

BridgeFloor.obj: floors/BridgeFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BridgeFloor.obj -MD -MP -MF $(DEPDIR)/BridgeFloor.Tpo -c -o BridgeFloor.obj `if test -f 'floors/BridgeFloor.cc'; then $(CYGPATH_W) 'floors/BridgeFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/BridgeFloor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BridgeFloor.Tpo $(DEPDIR)/BridgeFloor.Po
#	$(AM_V_CXX)source='floors/BridgeFloor.cc' object='BridgeFloor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BridgeFloor.obj `if test -f 'floors/BridgeFloor.cc'; then $(CYGPATH_W) 'floors/BridgeFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/BridgeFloor.cc'; fi`

FloodStream.o: floors/FloodStream.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FloodStream.o -MD -MP -MF $(DEPDIR)/FloodStream.Tpo -c -o FloodStream.o `test -f 'floors/FloodStream.cc' || echo '$(srcdir)/'`floors/FloodStream.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/FloodStream.Tpo $(DEPDIR)/FloodStream.Po
#	$(AM_V_CXX)source='floors/FloodStream.cc' object='FloodStream.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FloodStream.o `test -f 'floors/FloodStream.cc' || echo '$(srcdir)/'`floors/FloodStream.cc

FloodStream.obj: floors/FloodStream.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FloodStream.obj -MD -MP -MF $(DEPDIR)/FloodStream.Tpo -c -o FloodStream.obj `if test -f 'floors/FloodStream.cc'; then $(CYGPATH_W) 'floors/FloodStream.cc'; else $(CYGPATH_W) '$(srcdir)/floors/FloodStream.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/FloodStream.Tpo $(DEPDIR)/FloodStream.Po
#	$(AM_V_CXX)source='floors/FloodStream.cc' object='FloodStream.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FloodStream.obj `if test -f 'floors/FloodStream.cc'; then $(CYGPATH_W) 'floors/FloodStream.cc'; else $(CYGPATH_W) '$(srcdir)/floors/FloodStream.cc'; fi`

ScalesFloor.o: floors/ScalesFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScalesFloor.o -MD -MP -MF $(DEPDIR)/ScalesFloor.Tpo -c -o ScalesFloor.o `test -f 'floors/ScalesFloor.cc' || echo '$(srcdir)/'`floors/ScalesFloor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScalesFloor.Tpo $(DEPDIR)/ScalesFloor.Po
#	$(AM_V_CXX)source='floors/ScalesFloor.cc' object='ScalesFloor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScalesFloor.o `test -f 'floors/ScalesFloor.cc' || echo '$(srcdir)/'`floors/ScalesFloor.cc

ScalesFloor.obj: floors/ScalesFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScalesFloor.obj -MD -MP -MF $(DEPDIR)/ScalesFloor.Tpo -c -o ScalesFloor.obj `if test -f 'floors/ScalesFloor.cc'; then $(CYGPATH_W) 'floors/ScalesFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/ScalesFloor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScalesFloor.Tpo $(DEPDIR)/ScalesFloor.Po
#	$(AM_V_CXX)source='floors/ScalesFloor.cc' object='ScalesFloor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScalesFloor.obj `if test -f 'floors/ScalesFloor.cc'; then $(CYGPATH_W) 'floors/ScalesFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/ScalesFloor.cc'; fi`

SimpleFloors.o: floors/SimpleFloors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleFloors.o -MD -MP -MF $(DEPDIR)/SimpleFloors.Tpo -c -o SimpleFloors.o `test -f 'floors/SimpleFloors.cc' || echo '$(srcdir)/'`floors/SimpleFloors.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleFloors.Tpo $(DEPDIR)/SimpleFloors.Po
#	$(AM_V_CXX)source='floors/SimpleFloors.cc' object='SimpleFloors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleFloors.o `test -f 'floors/SimpleFloors.cc' || echo '$(srcdir)/'`floors/SimpleFloors.cc

SimpleFloors.obj: floors/SimpleFloors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleFloors.obj -MD -MP -MF $(DEPDIR)/SimpleFloors.Tpo -c -o SimpleFloors.obj `if test -f 'floors/SimpleFloors.cc'; then $(CYGPATH_W) 'floors/SimpleFloors.cc'; else $(CYGPATH_W) '$(srcdir)/floors/SimpleFloors.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleFloors.Tpo $(DEPDIR)/SimpleFloors.Po
#	$(AM_V_CXX)source='floors/SimpleFloors.cc' object='SimpleFloors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleFloors.obj `if test -f 'floors/SimpleFloors.cc'; then $(CYGPATH_W) 'floors/SimpleFloors.cc'; else $(CYGPATH_W) '$(srcdir)/floors/SimpleFloors.cc'; fi`

SlopeFloor.o: floors/SlopeFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SlopeFloor.o -MD -MP -MF $(DEPDIR)/SlopeFloor.Tpo -c -o SlopeFloor.o `test -f 'floors/SlopeFloor.cc' || echo '$(srcdir)/'`floors/SlopeFloor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SlopeFloor.Tpo $(DEPDIR)/SlopeFloor.Po
#	$(AM_V_CXX)source='floors/SlopeFloor.cc' object='SlopeFloor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SlopeFloor.o `test -f 'floors/SlopeFloor.cc' || echo '$(srcdir)/'`floors/SlopeFloor.cc

SlopeFloor.obj: floors/SlopeFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SlopeFloor.obj -MD -MP -MF $(DEPDIR)/SlopeFloor.Tpo -c -o SlopeFloor.obj `if test -f 'floors/SlopeFloor.cc'; then $(CYGPATH_W) 'floors/SlopeFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/SlopeFloor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SlopeFloor.Tpo $(DEPDIR)/SlopeFloor.Po
#	$(AM_V_CXX)source='floors/SlopeFloor.cc' object='SlopeFloor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SlopeFloor.obj `if test -f 'floors/SlopeFloor.cc'; then $(CYGPATH_W) 'floors/SlopeFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/SlopeFloor.cc'; fi`

StandardFloors.o: floors/StandardFloors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandardFloors.o -MD -MP -MF $(DEPDIR)/StandardFloors.Tpo -c -o StandardFloors.o `test -f 'floors/StandardFloors.cc' || echo '$(srcdir)/'`floors/StandardFloors.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/StandardFloors.Tpo $(DEPDIR)/StandardFloors.Po
#	$(AM_V_CXX)source='floors/StandardFloors.cc' object='StandardFloors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandardFloors.o `test -f 'floors/StandardFloors.cc' || echo '$(srcdir)/'`floors/StandardFloors.cc

StandardFloors.obj: floors/StandardFloors.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandardFloors.obj -MD -MP -MF $(DEPDIR)/StandardFloors.Tpo -c -o StandardFloors.obj `if test -f 'floors/StandardFloors.cc'; then $(CYGPATH_W) 'floors/StandardFloors.cc'; else $(CYGPATH_W) '$(srcdir)/floors/StandardFloors.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/StandardFloors.Tpo $(DEPDIR)/StandardFloors.Po
#	$(AM_V_CXX)source='floors/StandardFloors.cc' object='StandardFloors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandardFloors.obj `if test -f 'floors/StandardFloors.cc'; then $(CYGPATH_W) 'floors/StandardFloors.cc'; else $(CYGPATH_W) '$(srcdir)/floors/StandardFloors.cc'; fi`

ThiefFloor.o: floors/ThiefFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ThiefFloor.o -MD -MP -MF $(DEPDIR)/ThiefFloor.Tpo -c -o ThiefFloor.o `test -f 'floors/ThiefFloor.cc' || echo '$(srcdir)/'`floors/ThiefFloor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ThiefFloor.Tpo $(DEPDIR)/ThiefFloor.Po
#	$(AM_V_CXX)source='floors/ThiefFloor.cc' object='ThiefFloor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ThiefFloor.o `test -f 'floors/ThiefFloor.cc' || echo '$(srcdir)/'`floors/ThiefFloor.cc

ThiefFloor.obj: floors/ThiefFloor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ThiefFloor.obj -MD -MP -MF $(DEPDIR)/ThiefFloor.Tpo -c -o ThiefFloor.obj `if test -f 'floors/ThiefFloor.cc'; then $(CYGPATH_W) 'floors/ThiefFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/ThiefFloor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ThiefFloor.Tpo $(DEPDIR)/ThiefFloor.Po
#	$(AM_V_CXX)source='floors/ThiefFloor.cc' object='ThiefFloor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ThiefFloor.obj `if test -f 'floors/ThiefFloor.cc'; then $(CYGPATH_W) 'floors/ThiefFloor.cc'; else $(CYGPATH_W) '$(srcdir)/floors/ThiefFloor.cc'; fi`

ErrorMenu.o: gui/ErrorMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ErrorMenu.o -MD -MP -MF $(DEPDIR)/ErrorMenu.Tpo -c -o ErrorMenu.o `test -f 'gui/ErrorMenu.cc' || echo '$(srcdir)/'`gui/ErrorMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ErrorMenu.Tpo $(DEPDIR)/ErrorMenu.Po
#	$(AM_V_CXX)source='gui/ErrorMenu.cc' object='ErrorMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ErrorMenu.o `test -f 'gui/ErrorMenu.cc' || echo '$(srcdir)/'`gui/ErrorMenu.cc

ErrorMenu.obj: gui/ErrorMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ErrorMenu.obj -MD -MP -MF $(DEPDIR)/ErrorMenu.Tpo -c -o ErrorMenu.obj `if test -f 'gui/ErrorMenu.cc'; then $(CYGPATH_W) 'gui/ErrorMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/ErrorMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ErrorMenu.Tpo $(DEPDIR)/ErrorMenu.Po
#	$(AM_V_CXX)source='gui/ErrorMenu.cc' object='ErrorMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ErrorMenu.obj `if test -f 'gui/ErrorMenu.cc'; then $(CYGPATH_W) 'gui/ErrorMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/ErrorMenu.cc'; fi`

GameMenu.o: gui/GameMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameMenu.o -MD -MP -MF $(DEPDIR)/GameMenu.Tpo -c -o GameMenu.o `test -f 'gui/GameMenu.cc' || echo '$(srcdir)/'`gui/GameMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/GameMenu.Tpo $(DEPDIR)/GameMenu.Po
#	$(AM_V_CXX)source='gui/GameMenu.cc' object='GameMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameMenu.o `test -f 'gui/GameMenu.cc' || echo '$(srcdir)/'`gui/GameMenu.cc

GameMenu.obj: gui/GameMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameMenu.obj -MD -MP -MF $(DEPDIR)/GameMenu.Tpo -c -o GameMenu.obj `if test -f 'gui/GameMenu.cc'; then $(CYGPATH_W) 'gui/GameMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/GameMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/GameMenu.Tpo $(DEPDIR)/GameMenu.Po
#	$(AM_V_CXX)source='gui/GameMenu.cc' object='GameMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameMenu.obj `if test -f 'gui/GameMenu.cc'; then $(CYGPATH_W) 'gui/GameMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/GameMenu.cc'; fi`

HelpMenu.o: gui/HelpMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT HelpMenu.o -MD -MP -MF $(DEPDIR)/HelpMenu.Tpo -c -o HelpMenu.o `test -f 'gui/HelpMenu.cc' || echo '$(srcdir)/'`gui/HelpMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/HelpMenu.Tpo $(DEPDIR)/HelpMenu.Po
#	$(AM_V_CXX)source='gui/HelpMenu.cc' object='HelpMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o HelpMenu.o `test -f 'gui/HelpMenu.cc' || echo '$(srcdir)/'`gui/HelpMenu.cc

HelpMenu.obj: gui/HelpMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT HelpMenu.obj -MD -MP -MF $(DEPDIR)/HelpMenu.Tpo -c -o HelpMenu.obj `if test -f 'gui/HelpMenu.cc'; then $(CYGPATH_W) 'gui/HelpMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/HelpMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/HelpMenu.Tpo $(DEPDIR)/HelpMenu.Po
#	$(AM_V_CXX)source='gui/HelpMenu.cc' object='HelpMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o HelpMenu.obj `if test -f 'gui/HelpMenu.cc'; then $(CYGPATH_W) 'gui/HelpMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/HelpMenu.cc'; fi`

InfoMenu.o: gui/InfoMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfoMenu.o -MD -MP -MF $(DEPDIR)/InfoMenu.Tpo -c -o InfoMenu.o `test -f 'gui/InfoMenu.cc' || echo '$(srcdir)/'`gui/InfoMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/InfoMenu.Tpo $(DEPDIR)/InfoMenu.Po
#	$(AM_V_CXX)source='gui/InfoMenu.cc' object='InfoMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfoMenu.o `test -f 'gui/InfoMenu.cc' || echo '$(srcdir)/'`gui/InfoMenu.cc

InfoMenu.obj: gui/InfoMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfoMenu.obj -MD -MP -MF $(DEPDIR)/InfoMenu.Tpo -c -o InfoMenu.obj `if test -f 'gui/InfoMenu.cc'; then $(CYGPATH_W) 'gui/InfoMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/InfoMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/InfoMenu.Tpo $(DEPDIR)/InfoMenu.Po
#	$(AM_V_CXX)source='gui/InfoMenu.cc' object='InfoMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfoMenu.obj `if test -f 'gui/InfoMenu.cc'; then $(CYGPATH_W) 'gui/InfoMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/InfoMenu.cc'; fi`

LevelInspector.o: gui/LevelInspector.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelInspector.o -MD -MP -MF $(DEPDIR)/LevelInspector.Tpo -c -o LevelInspector.o `test -f 'gui/LevelInspector.cc' || echo '$(srcdir)/'`gui/LevelInspector.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelInspector.Tpo $(DEPDIR)/LevelInspector.Po
#	$(AM_V_CXX)source='gui/LevelInspector.cc' object='LevelInspector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelInspector.o `test -f 'gui/LevelInspector.cc' || echo '$(srcdir)/'`gui/LevelInspector.cc

LevelInspector.obj: gui/LevelInspector.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelInspector.obj -MD -MP -MF $(DEPDIR)/LevelInspector.Tpo -c -o LevelInspector.obj `if test -f 'gui/LevelInspector.cc'; then $(CYGPATH_W) 'gui/LevelInspector.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelInspector.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelInspector.Tpo $(DEPDIR)/LevelInspector.Po
#	$(AM_V_CXX)source='gui/LevelInspector.cc' object='LevelInspector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelInspector.obj `if test -f 'gui/LevelInspector.cc'; then $(CYGPATH_W) 'gui/LevelInspector.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelInspector.cc'; fi`

LevelMenu.o: gui/LevelMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelMenu.o -MD -MP -MF $(DEPDIR)/LevelMenu.Tpo -c -o LevelMenu.o `test -f 'gui/LevelMenu.cc' || echo '$(srcdir)/'`gui/LevelMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelMenu.Tpo $(DEPDIR)/LevelMenu.Po
#	$(AM_V_CXX)source='gui/LevelMenu.cc' object='LevelMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelMenu.o `test -f 'gui/LevelMenu.cc' || echo '$(srcdir)/'`gui/LevelMenu.cc

LevelMenu.obj: gui/LevelMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelMenu.obj -MD -MP -MF $(DEPDIR)/LevelMenu.Tpo -c -o LevelMenu.obj `if test -f 'gui/LevelMenu.cc'; then $(CYGPATH_W) 'gui/LevelMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelMenu.Tpo $(DEPDIR)/LevelMenu.Po
#	$(AM_V_CXX)source='gui/LevelMenu.cc' object='LevelMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelMenu.obj `if test -f 'gui/LevelMenu.cc'; then $(CYGPATH_W) 'gui/LevelMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelMenu.cc'; fi`

LevelPackComposer.o: gui/LevelPackComposer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackComposer.o -MD -MP -MF $(DEPDIR)/LevelPackComposer.Tpo -c -o LevelPackComposer.o `test -f 'gui/LevelPackComposer.cc' || echo '$(srcdir)/'`gui/LevelPackComposer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackComposer.Tpo $(DEPDIR)/LevelPackComposer.Po
#	$(AM_V_CXX)source='gui/LevelPackComposer.cc' object='LevelPackComposer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackComposer.o `test -f 'gui/LevelPackComposer.cc' || echo '$(srcdir)/'`gui/LevelPackComposer.cc

LevelPackComposer.obj: gui/LevelPackComposer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackComposer.obj -MD -MP -MF $(DEPDIR)/LevelPackComposer.Tpo -c -o LevelPackComposer.obj `if test -f 'gui/LevelPackComposer.cc'; then $(CYGPATH_W) 'gui/LevelPackComposer.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackComposer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackComposer.Tpo $(DEPDIR)/LevelPackComposer.Po
#	$(AM_V_CXX)source='gui/LevelPackComposer.cc' object='LevelPackComposer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackComposer.obj `if test -f 'gui/LevelPackComposer.cc'; then $(CYGPATH_W) 'gui/LevelPackComposer.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackComposer.cc'; fi`

LevelPackConfig.o: gui/LevelPackConfig.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackConfig.o -MD -MP -MF $(DEPDIR)/LevelPackConfig.Tpo -c -o LevelPackConfig.o `test -f 'gui/LevelPackConfig.cc' || echo '$(srcdir)/'`gui/LevelPackConfig.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackConfig.Tpo $(DEPDIR)/LevelPackConfig.Po
#	$(AM_V_CXX)source='gui/LevelPackConfig.cc' object='LevelPackConfig.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackConfig.o `test -f 'gui/LevelPackConfig.cc' || echo '$(srcdir)/'`gui/LevelPackConfig.cc

LevelPackConfig.obj: gui/LevelPackConfig.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackConfig.obj -MD -MP -MF $(DEPDIR)/LevelPackConfig.Tpo -c -o LevelPackConfig.obj `if test -f 'gui/LevelPackConfig.cc'; then $(CYGPATH_W) 'gui/LevelPackConfig.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackConfig.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackConfig.Tpo $(DEPDIR)/LevelPackConfig.Po
#	$(AM_V_CXX)source='gui/LevelPackConfig.cc' object='LevelPackConfig.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackConfig.obj `if test -f 'gui/LevelPackConfig.cc'; then $(CYGPATH_W) 'gui/LevelPackConfig.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackConfig.cc'; fi`

LevelPackMenu.o: gui/LevelPackMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackMenu.o -MD -MP -MF $(DEPDIR)/LevelPackMenu.Tpo -c -o LevelPackMenu.o `test -f 'gui/LevelPackMenu.cc' || echo '$(srcdir)/'`gui/LevelPackMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackMenu.Tpo $(DEPDIR)/LevelPackMenu.Po
#	$(AM_V_CXX)source='gui/LevelPackMenu.cc' object='LevelPackMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackMenu.o `test -f 'gui/LevelPackMenu.cc' || echo '$(srcdir)/'`gui/LevelPackMenu.cc

LevelPackMenu.obj: gui/LevelPackMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPackMenu.obj -MD -MP -MF $(DEPDIR)/LevelPackMenu.Tpo -c -o LevelPackMenu.obj `if test -f 'gui/LevelPackMenu.cc'; then $(CYGPATH_W) 'gui/LevelPackMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPackMenu.Tpo $(DEPDIR)/LevelPackMenu.Po
#	$(AM_V_CXX)source='gui/LevelPackMenu.cc' object='LevelPackMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPackMenu.obj `if test -f 'gui/LevelPackMenu.cc'; then $(CYGPATH_W) 'gui/LevelPackMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPackMenu.cc'; fi`

LevelPreviewCache.o: gui/LevelPreviewCache.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPreviewCache.o -MD -MP -MF $(DEPDIR)/LevelPreviewCache.Tpo -c -o LevelPreviewCache.o `test -f 'gui/LevelPreviewCache.cc' || echo '$(srcdir)/'`gui/LevelPreviewCache.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPreviewCache.Tpo $(DEPDIR)/LevelPreviewCache.Po
#	$(AM_V_CXX)source='gui/LevelPreviewCache.cc' object='LevelPreviewCache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPreviewCache.o `test -f 'gui/LevelPreviewCache.cc' || echo '$(srcdir)/'`gui/LevelPreviewCache.cc

LevelPreviewCache.obj: gui/LevelPreviewCache.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelPreviewCache.obj -MD -MP -MF $(DEPDIR)/LevelPreviewCache.Tpo -c -o LevelPreviewCache.obj `if test -f 'gui/LevelPreviewCache.cc'; then $(CYGPATH_W) 'gui/LevelPreviewCache.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPreviewCache.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelPreviewCache.Tpo $(DEPDIR)/LevelPreviewCache.Po
#	$(AM_V_CXX)source='gui/LevelPreviewCache.cc' object='LevelPreviewCache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelPreviewCache.obj `if test -f 'gui/LevelPreviewCache.cc'; then $(CYGPATH_W) 'gui/LevelPreviewCache.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelPreviewCache.cc'; fi`

LevelWidget.o: gui/LevelWidget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelWidget.o -MD -MP -MF $(DEPDIR)/LevelWidget.Tpo -c -o LevelWidget.o `test -f 'gui/LevelWidget.cc' || echo '$(srcdir)/'`gui/LevelWidget.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelWidget.Tpo $(DEPDIR)/LevelWidget.Po
#	$(AM_V_CXX)source='gui/LevelWidget.cc' object='LevelWidget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelWidget.o `test -f 'gui/LevelWidget.cc' || echo '$(srcdir)/'`gui/LevelWidget.cc

LevelWidget.obj: gui/LevelWidget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LevelWidget.obj -MD -MP -MF $(DEPDIR)/LevelWidget.Tpo -c -o LevelWidget.obj `if test -f 'gui/LevelWidget.cc'; then $(CYGPATH_W) 'gui/LevelWidget.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelWidget.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LevelWidget.Tpo $(DEPDIR)/LevelWidget.Po
#	$(AM_V_CXX)source='gui/LevelWidget.cc' object='LevelWidget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LevelWidget.obj `if test -f 'gui/LevelWidget.cc'; then $(CYGPATH_W) 'gui/LevelWidget.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LevelWidget.cc'; fi`

LPGroupConfig.o: gui/LPGroupConfig.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LPGroupConfig.o -MD -MP -MF $(DEPDIR)/LPGroupConfig.Tpo -c -o LPGroupConfig.o `test -f 'gui/LPGroupConfig.cc' || echo '$(srcdir)/'`gui/LPGroupConfig.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LPGroupConfig.Tpo $(DEPDIR)/LPGroupConfig.Po
#	$(AM_V_CXX)source='gui/LPGroupConfig.cc' object='LPGroupConfig.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LPGroupConfig.o `test -f 'gui/LPGroupConfig.cc' || echo '$(srcdir)/'`gui/LPGroupConfig.cc

LPGroupConfig.obj: gui/LPGroupConfig.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LPGroupConfig.obj -MD -MP -MF $(DEPDIR)/LPGroupConfig.Tpo -c -o LPGroupConfig.obj `if test -f 'gui/LPGroupConfig.cc'; then $(CYGPATH_W) 'gui/LPGroupConfig.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LPGroupConfig.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LPGroupConfig.Tpo $(DEPDIR)/LPGroupConfig.Po
#	$(AM_V_CXX)source='gui/LPGroupConfig.cc' object='LPGroupConfig.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LPGroupConfig.obj `if test -f 'gui/LPGroupConfig.cc'; then $(CYGPATH_W) 'gui/LPGroupConfig.cc'; else $(CYGPATH_W) '$(srcdir)/gui/LPGroupConfig.cc'; fi`

MainMenu.o: gui/MainMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainMenu.o -MD -MP -MF $(DEPDIR)/MainMenu.Tpo -c -o MainMenu.o `test -f 'gui/MainMenu.cc' || echo '$(srcdir)/'`gui/MainMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MainMenu.Tpo $(DEPDIR)/MainMenu.Po
#	$(AM_V_CXX)source='gui/MainMenu.cc' object='MainMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainMenu.o `test -f 'gui/MainMenu.cc' || echo '$(srcdir)/'`gui/MainMenu.cc

MainMenu.obj: gui/MainMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainMenu.obj -MD -MP -MF $(DEPDIR)/MainMenu.Tpo -c -o MainMenu.obj `if test -f 'gui/MainMenu.cc'; then $(CYGPATH_W) 'gui/MainMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/MainMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MainMenu.Tpo $(DEPDIR)/MainMenu.Po
#	$(AM_V_CXX)source='gui/MainMenu.cc' object='MainMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainMenu.obj `if test -f 'gui/MainMenu.cc'; then $(CYGPATH_W) 'gui/MainMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/MainMenu.cc'; fi`

Menu.o: gui/Menu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Menu.o -MD -MP -MF $(DEPDIR)/Menu.Tpo -c -o Menu.o `test -f 'gui/Menu.cc' || echo '$(srcdir)/'`gui/Menu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Menu.Tpo $(DEPDIR)/Menu.Po
#	$(AM_V_CXX)source='gui/Menu.cc' object='Menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Menu.o `test -f 'gui/Menu.cc' || echo '$(srcdir)/'`gui/Menu.cc

Menu.obj: gui/Menu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Menu.obj -MD -MP -MF $(DEPDIR)/Menu.Tpo -c -o Menu.obj `if test -f 'gui/Menu.cc'; then $(CYGPATH_W) 'gui/Menu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/Menu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Menu.Tpo $(DEPDIR)/Menu.Po
#	$(AM_V_CXX)source='gui/Menu.cc' object='Menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Menu.obj `if test -f 'gui/Menu.cc'; then $(CYGPATH_W) 'gui/Menu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/Menu.cc'; fi`

MonospacedLabel.o: gui/MonospacedLabel.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MonospacedLabel.o -MD -MP -MF $(DEPDIR)/MonospacedLabel.Tpo -c -o MonospacedLabel.o `test -f 'gui/MonospacedLabel.cc' || echo '$(srcdir)/'`gui/MonospacedLabel.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MonospacedLabel.Tpo $(DEPDIR)/MonospacedLabel.Po
#	$(AM_V_CXX)source='gui/MonospacedLabel.cc' object='MonospacedLabel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MonospacedLabel.o `test -f 'gui/MonospacedLabel.cc' || echo '$(srcdir)/'`gui/MonospacedLabel.cc

MonospacedLabel.obj: gui/MonospacedLabel.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MonospacedLabel.obj -MD -MP -MF $(DEPDIR)/MonospacedLabel.Tpo -c -o MonospacedLabel.obj `if test -f 'gui/MonospacedLabel.cc'; then $(CYGPATH_W) 'gui/MonospacedLabel.cc'; else $(CYGPATH_W) '$(srcdir)/gui/MonospacedLabel.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MonospacedLabel.Tpo $(DEPDIR)/MonospacedLabel.Po
#	$(AM_V_CXX)source='gui/MonospacedLabel.cc' object='MonospacedLabel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MonospacedLabel.obj `if test -f 'gui/MonospacedLabel.cc'; then $(CYGPATH_W) 'gui/MonospacedLabel.cc'; else $(CYGPATH_W) '$(srcdir)/gui/MonospacedLabel.cc'; fi`

OptionsMenu.o: gui/OptionsMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OptionsMenu.o -MD -MP -MF $(DEPDIR)/OptionsMenu.Tpo -c -o OptionsMenu.o `test -f 'gui/OptionsMenu.cc' || echo '$(srcdir)/'`gui/OptionsMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/OptionsMenu.Tpo $(DEPDIR)/OptionsMenu.Po
#	$(AM_V_CXX)source='gui/OptionsMenu.cc' object='OptionsMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OptionsMenu.o `test -f 'gui/OptionsMenu.cc' || echo '$(srcdir)/'`gui/OptionsMenu.cc

OptionsMenu.obj: gui/OptionsMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OptionsMenu.obj -MD -MP -MF $(DEPDIR)/OptionsMenu.Tpo -c -o OptionsMenu.obj `if test -f 'gui/OptionsMenu.cc'; then $(CYGPATH_W) 'gui/OptionsMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/OptionsMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/OptionsMenu.Tpo $(DEPDIR)/OptionsMenu.Po
#	$(AM_V_CXX)source='gui/OptionsMenu.cc' object='OptionsMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OptionsMenu.obj `if test -f 'gui/OptionsMenu.cc'; then $(CYGPATH_W) 'gui/OptionsMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/OptionsMenu.cc'; fi`

ScreenshotViewer.o: gui/ScreenshotViewer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScreenshotViewer.o -MD -MP -MF $(DEPDIR)/ScreenshotViewer.Tpo -c -o ScreenshotViewer.o `test -f 'gui/ScreenshotViewer.cc' || echo '$(srcdir)/'`gui/ScreenshotViewer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScreenshotViewer.Tpo $(DEPDIR)/ScreenshotViewer.Po
#	$(AM_V_CXX)source='gui/ScreenshotViewer.cc' object='ScreenshotViewer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScreenshotViewer.o `test -f 'gui/ScreenshotViewer.cc' || echo '$(srcdir)/'`gui/ScreenshotViewer.cc

ScreenshotViewer.obj: gui/ScreenshotViewer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScreenshotViewer.obj -MD -MP -MF $(DEPDIR)/ScreenshotViewer.Tpo -c -o ScreenshotViewer.obj `if test -f 'gui/ScreenshotViewer.cc'; then $(CYGPATH_W) 'gui/ScreenshotViewer.cc'; else $(CYGPATH_W) '$(srcdir)/gui/ScreenshotViewer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScreenshotViewer.Tpo $(DEPDIR)/ScreenshotViewer.Po
#	$(AM_V_CXX)source='gui/ScreenshotViewer.cc' object='ScreenshotViewer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScreenshotViewer.obj `if test -f 'gui/ScreenshotViewer.cc'; then $(CYGPATH_W) 'gui/ScreenshotViewer.cc'; else $(CYGPATH_W) '$(srcdir)/gui/ScreenshotViewer.cc'; fi`

SearchMenu.o: gui/SearchMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SearchMenu.o -MD -MP -MF $(DEPDIR)/SearchMenu.Tpo -c -o SearchMenu.o `test -f 'gui/SearchMenu.cc' || echo '$(srcdir)/'`gui/SearchMenu.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SearchMenu.Tpo $(DEPDIR)/SearchMenu.Po
#	$(AM_V_CXX)source='gui/SearchMenu.cc' object='SearchMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SearchMenu.o `test -f 'gui/SearchMenu.cc' || echo '$(srcdir)/'`gui/SearchMenu.cc

SearchMenu.obj: gui/SearchMenu.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SearchMenu.obj -MD -MP -MF $(DEPDIR)/SearchMenu.Tpo -c -o SearchMenu.obj `if test -f 'gui/SearchMenu.cc'; then $(CYGPATH_W) 'gui/SearchMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/SearchMenu.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SearchMenu.Tpo $(DEPDIR)/SearchMenu.Po
#	$(AM_V_CXX)source='gui/SearchMenu.cc' object='SearchMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SearchMenu.obj `if test -f 'gui/SearchMenu.cc'; then $(CYGPATH_W) 'gui/SearchMenu.cc'; else $(CYGPATH_W) '$(srcdir)/gui/SearchMenu.cc'; fi`

TextField.o: gui/TextField.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextField.o -MD -MP -MF $(DEPDIR)/TextField.Tpo -c -o TextField.o `test -f 'gui/TextField.cc' || echo '$(srcdir)/'`gui/TextField.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/TextField.Tpo $(DEPDIR)/TextField.Po
#	$(AM_V_CXX)source='gui/TextField.cc' object='TextField.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextField.o `test -f 'gui/TextField.cc' || echo '$(srcdir)/'`gui/TextField.cc

TextField.obj: gui/TextField.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextField.obj -MD -MP -MF $(DEPDIR)/TextField.Tpo -c -o TextField.obj `if test -f 'gui/TextField.cc'; then $(CYGPATH_W) 'gui/TextField.cc'; else $(CYGPATH_W) '$(srcdir)/gui/TextField.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/TextField.Tpo $(DEPDIR)/TextField.Po
#	$(AM_V_CXX)source='gui/TextField.cc' object='TextField.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextField.obj `if test -f 'gui/TextField.cc'; then $(CYGPATH_W) 'gui/TextField.cc'; else $(CYGPATH_W) '$(srcdir)/gui/TextField.cc'; fi`

widgets.o: gui/widgets.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT widgets.o -MD -MP -MF $(DEPDIR)/widgets.Tpo -c -o widgets.o `test -f 'gui/widgets.cc' || echo '$(srcdir)/'`gui/widgets.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/widgets.Tpo $(DEPDIR)/widgets.Po
#	$(AM_V_CXX)source='gui/widgets.cc' object='widgets.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o widgets.o `test -f 'gui/widgets.cc' || echo '$(srcdir)/'`gui/widgets.cc

widgets.obj: gui/widgets.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT widgets.obj -MD -MP -MF $(DEPDIR)/widgets.Tpo -c -o widgets.obj `if test -f 'gui/widgets.cc'; then $(CYGPATH_W) 'gui/widgets.cc'; else $(CYGPATH_W) '$(srcdir)/gui/widgets.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/widgets.Tpo $(DEPDIR)/widgets.Po
#	$(AM_V_CXX)source='gui/widgets.cc' object='widgets.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o widgets.obj `if test -f 'gui/widgets.cc'; then $(CYGPATH_W) 'gui/widgets.cc'; else $(CYGPATH_W) '$(srcdir)/gui/widgets.cc'; fi`

BagItem.o: items/BagItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BagItem.o -MD -MP -MF $(DEPDIR)/BagItem.Tpo -c -o BagItem.o `test -f 'items/BagItem.cc' || echo '$(srcdir)/'`items/BagItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BagItem.Tpo $(DEPDIR)/BagItem.Po
#	$(AM_V_CXX)source='items/BagItem.cc' object='BagItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BagItem.o `test -f 'items/BagItem.cc' || echo '$(srcdir)/'`items/BagItem.cc

BagItem.obj: items/BagItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BagItem.obj -MD -MP -MF $(DEPDIR)/BagItem.Tpo -c -o BagItem.obj `if test -f 'items/BagItem.cc'; then $(CYGPATH_W) 'items/BagItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BagItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BagItem.Tpo $(DEPDIR)/BagItem.Po
#	$(AM_V_CXX)source='items/BagItem.cc' object='BagItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BagItem.obj `if test -f 'items/BagItem.cc'; then $(CYGPATH_W) 'items/BagItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BagItem.cc'; fi`

BrakeItem.o: items/BrakeItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrakeItem.o -MD -MP -MF $(DEPDIR)/BrakeItem.Tpo -c -o BrakeItem.o `test -f 'items/BrakeItem.cc' || echo '$(srcdir)/'`items/BrakeItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BrakeItem.Tpo $(DEPDIR)/BrakeItem.Po
#	$(AM_V_CXX)source='items/BrakeItem.cc' object='BrakeItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrakeItem.o `test -f 'items/BrakeItem.cc' || echo '$(srcdir)/'`items/BrakeItem.cc

BrakeItem.obj: items/BrakeItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrakeItem.obj -MD -MP -MF $(DEPDIR)/BrakeItem.Tpo -c -o BrakeItem.obj `if test -f 'items/BrakeItem.cc'; then $(CYGPATH_W) 'items/BrakeItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BrakeItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BrakeItem.Tpo $(DEPDIR)/BrakeItem.Po
#	$(AM_V_CXX)source='items/BrakeItem.cc' object='BrakeItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrakeItem.obj `if test -f 'items/BrakeItem.cc'; then $(CYGPATH_W) 'items/BrakeItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BrakeItem.cc'; fi`

BlockerItem.o: items/BlockerItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BlockerItem.o -MD -MP -MF $(DEPDIR)/BlockerItem.Tpo -c -o BlockerItem.o `test -f 'items/BlockerItem.cc' || echo '$(srcdir)/'`items/BlockerItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BlockerItem.Tpo $(DEPDIR)/BlockerItem.Po
#	$(AM_V_CXX)source='items/BlockerItem.cc' object='BlockerItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BlockerItem.o `test -f 'items/BlockerItem.cc' || echo '$(srcdir)/'`items/BlockerItem.cc

BlockerItem.obj: items/BlockerItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BlockerItem.obj -MD -MP -MF $(DEPDIR)/BlockerItem.Tpo -c -o BlockerItem.obj `if test -f 'items/BlockerItem.cc'; then $(CYGPATH_W) 'items/BlockerItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BlockerItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BlockerItem.Tpo $(DEPDIR)/BlockerItem.Po
#	$(AM_V_CXX)source='items/BlockerItem.cc' object='BlockerItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BlockerItem.obj `if test -f 'items/BlockerItem.cc'; then $(CYGPATH_W) 'items/BlockerItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BlockerItem.cc'; fi`

Bomb.o: items/Bomb.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bomb.o -MD -MP -MF $(DEPDIR)/Bomb.Tpo -c -o Bomb.o `test -f 'items/Bomb.cc' || echo '$(srcdir)/'`items/Bomb.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Bomb.Tpo $(DEPDIR)/Bomb.Po
#	$(AM_V_CXX)source='items/Bomb.cc' object='Bomb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bomb.o `test -f 'items/Bomb.cc' || echo '$(srcdir)/'`items/Bomb.cc

Bomb.obj: items/Bomb.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bomb.obj -MD -MP -MF $(DEPDIR)/Bomb.Tpo -c -o Bomb.obj `if test -f 'items/Bomb.cc'; then $(CYGPATH_W) 'items/Bomb.cc'; else $(CYGPATH_W) '$(srcdir)/items/Bomb.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Bomb.Tpo $(DEPDIR)/Bomb.Po
#	$(AM_V_CXX)source='items/Bomb.cc' object='Bomb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bomb.obj `if test -f 'items/Bomb.cc'; then $(CYGPATH_W) 'items/Bomb.cc'; else $(CYGPATH_W) '$(srcdir)/items/Bomb.cc'; fi`

Bottle.o: items/Bottle.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bottle.o -MD -MP -MF $(DEPDIR)/Bottle.Tpo -c -o Bottle.o `test -f 'items/Bottle.cc' || echo '$(srcdir)/'`items/Bottle.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Bottle.Tpo $(DEPDIR)/Bottle.Po
#	$(AM_V_CXX)source='items/Bottle.cc' object='Bottle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bottle.o `test -f 'items/Bottle.cc' || echo '$(srcdir)/'`items/Bottle.cc

Bottle.obj: items/Bottle.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bottle.obj -MD -MP -MF $(DEPDIR)/Bottle.Tpo -c -o Bottle.obj `if test -f 'items/Bottle.cc'; then $(CYGPATH_W) 'items/Bottle.cc'; else $(CYGPATH_W) '$(srcdir)/items/Bottle.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Bottle.Tpo $(DEPDIR)/Bottle.Po
#	$(AM_V_CXX)source='items/Bottle.cc' object='Bottle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bottle.obj `if test -f 'items/Bottle.cc'; then $(CYGPATH_W) 'items/Bottle.cc'; else $(CYGPATH_W) '$(srcdir)/items/Bottle.cc'; fi`

BurnableItem.o: items/BurnableItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BurnableItem.o -MD -MP -MF $(DEPDIR)/BurnableItem.Tpo -c -o BurnableItem.o `test -f 'items/BurnableItem.cc' || echo '$(srcdir)/'`items/BurnableItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BurnableItem.Tpo $(DEPDIR)/BurnableItem.Po
#	$(AM_V_CXX)source='items/BurnableItem.cc' object='BurnableItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BurnableItem.o `test -f 'items/BurnableItem.cc' || echo '$(srcdir)/'`items/BurnableItem.cc

BurnableItem.obj: items/BurnableItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BurnableItem.obj -MD -MP -MF $(DEPDIR)/BurnableItem.Tpo -c -o BurnableItem.obj `if test -f 'items/BurnableItem.cc'; then $(CYGPATH_W) 'items/BurnableItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BurnableItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BurnableItem.Tpo $(DEPDIR)/BurnableItem.Po
#	$(AM_V_CXX)source='items/BurnableItem.cc' object='BurnableItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BurnableItem.obj `if test -f 'items/BurnableItem.cc'; then $(CYGPATH_W) 'items/BurnableItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/BurnableItem.cc'; fi`

Coin.o: items/Coin.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Coin.o -MD -MP -MF $(DEPDIR)/Coin.Tpo -c -o Coin.o `test -f 'items/Coin.cc' || echo '$(srcdir)/'`items/Coin.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Coin.Tpo $(DEPDIR)/Coin.Po
#	$(AM_V_CXX)source='items/Coin.cc' object='Coin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Coin.o `test -f 'items/Coin.cc' || echo '$(srcdir)/'`items/Coin.cc

Coin.obj: items/Coin.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Coin.obj -MD -MP -MF $(DEPDIR)/Coin.Tpo -c -o Coin.obj `if test -f 'items/Coin.cc'; then $(CYGPATH_W) 'items/Coin.cc'; else $(CYGPATH_W) '$(srcdir)/items/Coin.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Coin.Tpo $(DEPDIR)/Coin.Po
#	$(AM_V_CXX)source='items/Coin.cc' object='Coin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Coin.obj `if test -f 'items/Coin.cc'; then $(CYGPATH_W) 'items/Coin.cc'; else $(CYGPATH_W) '$(srcdir)/items/Coin.cc'; fi`

CompatibilityItems.o: items/CompatibilityItems.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompatibilityItems.o -MD -MP -MF $(DEPDIR)/CompatibilityItems.Tpo -c -o CompatibilityItems.o `test -f 'items/CompatibilityItems.cc' || echo '$(srcdir)/'`items/CompatibilityItems.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CompatibilityItems.Tpo $(DEPDIR)/CompatibilityItems.Po
#	$(AM_V_CXX)source='items/CompatibilityItems.cc' object='CompatibilityItems.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompatibilityItems.o `test -f 'items/CompatibilityItems.cc' || echo '$(srcdir)/'`items/CompatibilityItems.cc

CompatibilityItems.obj: items/CompatibilityItems.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompatibilityItems.obj -MD -MP -MF $(DEPDIR)/CompatibilityItems.Tpo -c -o CompatibilityItems.obj `if test -f 'items/CompatibilityItems.cc'; then $(CYGPATH_W) 'items/CompatibilityItems.cc'; else $(CYGPATH_W) '$(srcdir)/items/CompatibilityItems.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CompatibilityItems.Tpo $(DEPDIR)/CompatibilityItems.Po
#	$(AM_V_CXX)source='items/CompatibilityItems.cc' object='CompatibilityItems.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompatibilityItems.obj `if test -f 'items/CompatibilityItems.cc'; then $(CYGPATH_W) 'items/CompatibilityItems.cc'; else $(CYGPATH_W) '$(srcdir)/items/CompatibilityItems.cc'; fi`

Crack.o: items/Crack.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Crack.o -MD -MP -MF $(DEPDIR)/Crack.Tpo -c -o Crack.o `test -f 'items/Crack.cc' || echo '$(srcdir)/'`items/Crack.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Crack.Tpo $(DEPDIR)/Crack.Po
#	$(AM_V_CXX)source='items/Crack.cc' object='Crack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Crack.o `test -f 'items/Crack.cc' || echo '$(srcdir)/'`items/Crack.cc

Crack.obj: items/Crack.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Crack.obj -MD -MP -MF $(DEPDIR)/Crack.Tpo -c -o Crack.obj `if test -f 'items/Crack.cc'; then $(CYGPATH_W) 'items/Crack.cc'; else $(CYGPATH_W) '$(srcdir)/items/Crack.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Crack.Tpo $(DEPDIR)/Crack.Po
#	$(AM_V_CXX)source='items/Crack.cc' object='Crack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Crack.obj `if test -f 'items/Crack.cc'; then $(CYGPATH_W) 'items/Crack.cc'; else $(CYGPATH_W) '$(srcdir)/items/Crack.cc'; fi`

CrossItem.o: items/CrossItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrossItem.o -MD -MP -MF $(DEPDIR)/CrossItem.Tpo -c -o CrossItem.o `test -f 'items/CrossItem.cc' || echo '$(srcdir)/'`items/CrossItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CrossItem.Tpo $(DEPDIR)/CrossItem.Po
#	$(AM_V_CXX)source='items/CrossItem.cc' object='CrossItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrossItem.o `test -f 'items/CrossItem.cc' || echo '$(srcdir)/'`items/CrossItem.cc

CrossItem.obj: items/CrossItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrossItem.obj -MD -MP -MF $(DEPDIR)/CrossItem.Tpo -c -o CrossItem.obj `if test -f 'items/CrossItem.cc'; then $(CYGPATH_W) 'items/CrossItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/CrossItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CrossItem.Tpo $(DEPDIR)/CrossItem.Po
#	$(AM_V_CXX)source='items/CrossItem.cc' object='CrossItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrossItem.obj `if test -f 'items/CrossItem.cc'; then $(CYGPATH_W) 'items/CrossItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/CrossItem.cc'; fi`

DocumentItem.o: items/DocumentItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DocumentItem.o -MD -MP -MF $(DEPDIR)/DocumentItem.Tpo -c -o DocumentItem.o `test -f 'items/DocumentItem.cc' || echo '$(srcdir)/'`items/DocumentItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/DocumentItem.Tpo $(DEPDIR)/DocumentItem.Po
#	$(AM_V_CXX)source='items/DocumentItem.cc' object='DocumentItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DocumentItem.o `test -f 'items/DocumentItem.cc' || echo '$(srcdir)/'`items/DocumentItem.cc

DocumentItem.obj: items/DocumentItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DocumentItem.obj -MD -MP -MF $(DEPDIR)/DocumentItem.Tpo -c -o DocumentItem.obj `if test -f 'items/DocumentItem.cc'; then $(CYGPATH_W) 'items/DocumentItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/DocumentItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/DocumentItem.Tpo $(DEPDIR)/DocumentItem.Po
#	$(AM_V_CXX)source='items/DocumentItem.cc' object='DocumentItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DocumentItem.obj `if test -f 'items/DocumentItem.cc'; then $(CYGPATH_W) 'items/DocumentItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/DocumentItem.cc'; fi`

Drop.o: items/Drop.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Drop.o -MD -MP -MF $(DEPDIR)/Drop.Tpo -c -o Drop.o `test -f 'items/Drop.cc' || echo '$(srcdir)/'`items/Drop.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Drop.Tpo $(DEPDIR)/Drop.Po
#	$(AM_V_CXX)source='items/Drop.cc' object='Drop.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Drop.o `test -f 'items/Drop.cc' || echo '$(srcdir)/'`items/Drop.cc

Drop.obj: items/Drop.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Drop.obj -MD -MP -MF $(DEPDIR)/Drop.Tpo -c -o Drop.obj `if test -f 'items/Drop.cc'; then $(CYGPATH_W) 'items/Drop.cc'; else $(CYGPATH_W) '$(srcdir)/items/Drop.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Drop.Tpo $(DEPDIR)/Drop.Po
#	$(AM_V_CXX)source='items/Drop.cc' object='Drop.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Drop.obj `if test -f 'items/Drop.cc'; then $(CYGPATH_W) 'items/Drop.cc'; else $(CYGPATH_W) '$(srcdir)/items/Drop.cc'; fi`

Dynamite.o: items/Dynamite.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dynamite.o -MD -MP -MF $(DEPDIR)/Dynamite.Tpo -c -o Dynamite.o `test -f 'items/Dynamite.cc' || echo '$(srcdir)/'`items/Dynamite.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Dynamite.Tpo $(DEPDIR)/Dynamite.Po
#	$(AM_V_CXX)source='items/Dynamite.cc' object='Dynamite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dynamite.o `test -f 'items/Dynamite.cc' || echo '$(srcdir)/'`items/Dynamite.cc

Dynamite.obj: items/Dynamite.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dynamite.obj -MD -MP -MF $(DEPDIR)/Dynamite.Tpo -c -o Dynamite.obj `if test -f 'items/Dynamite.cc'; then $(CYGPATH_W) 'items/Dynamite.cc'; else $(CYGPATH_W) '$(srcdir)/items/Dynamite.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Dynamite.Tpo $(DEPDIR)/Dynamite.Po
#	$(AM_V_CXX)source='items/Dynamite.cc' object='Dynamite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dynamite.obj `if test -f 'items/Dynamite.cc'; then $(CYGPATH_W) 'items/Dynamite.cc'; else $(CYGPATH_W) '$(srcdir)/items/Dynamite.cc'; fi`

Extinguisher.o: items/Extinguisher.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Extinguisher.o -MD -MP -MF $(DEPDIR)/Extinguisher.Tpo -c -o Extinguisher.o `test -f 'items/Extinguisher.cc' || echo '$(srcdir)/'`items/Extinguisher.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Extinguisher.Tpo $(DEPDIR)/Extinguisher.Po
#	$(AM_V_CXX)source='items/Extinguisher.cc' object='Extinguisher.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Extinguisher.o `test -f 'items/Extinguisher.cc' || echo '$(srcdir)/'`items/Extinguisher.cc

Extinguisher.obj: items/Extinguisher.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Extinguisher.obj -MD -MP -MF $(DEPDIR)/Extinguisher.Tpo -c -o Extinguisher.obj `if test -f 'items/Extinguisher.cc'; then $(CYGPATH_W) 'items/Extinguisher.cc'; else $(CYGPATH_W) '$(srcdir)/items/Extinguisher.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Extinguisher.Tpo $(DEPDIR)/Extinguisher.Po
#	$(AM_V_CXX)source='items/Extinguisher.cc' object='Extinguisher.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Extinguisher.obj `if test -f 'items/Extinguisher.cc'; then $(CYGPATH_W) 'items/Extinguisher.cc'; else $(CYGPATH_W) '$(srcdir)/items/Extinguisher.cc'; fi`

ExtraLife.o: items/ExtraLife.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExtraLife.o -MD -MP -MF $(DEPDIR)/ExtraLife.Tpo -c -o ExtraLife.o `test -f 'items/ExtraLife.cc' || echo '$(srcdir)/'`items/ExtraLife.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ExtraLife.Tpo $(DEPDIR)/ExtraLife.Po
#	$(AM_V_CXX)source='items/ExtraLife.cc' object='ExtraLife.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExtraLife.o `test -f 'items/ExtraLife.cc' || echo '$(srcdir)/'`items/ExtraLife.cc

ExtraLife.obj: items/ExtraLife.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExtraLife.obj -MD -MP -MF $(DEPDIR)/ExtraLife.Tpo -c -o ExtraLife.obj `if test -f 'items/ExtraLife.cc'; then $(CYGPATH_W) 'items/ExtraLife.cc'; else $(CYGPATH_W) '$(srcdir)/items/ExtraLife.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ExtraLife.Tpo $(DEPDIR)/ExtraLife.Po
#	$(AM_V_CXX)source='items/ExtraLife.cc' object='ExtraLife.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExtraLife.obj `if test -f 'items/ExtraLife.cc'; then $(CYGPATH_W) 'items/ExtraLife.cc'; else $(CYGPATH_W) '$(srcdir)/items/ExtraLife.cc'; fi`

GlassesItem.o: items/GlassesItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlassesItem.o -MD -MP -MF $(DEPDIR)/GlassesItem.Tpo -c -o GlassesItem.o `test -f 'items/GlassesItem.cc' || echo '$(srcdir)/'`items/GlassesItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/GlassesItem.Tpo $(DEPDIR)/GlassesItem.Po
#	$(AM_V_CXX)source='items/GlassesItem.cc' object='GlassesItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlassesItem.o `test -f 'items/GlassesItem.cc' || echo '$(srcdir)/'`items/GlassesItem.cc

GlassesItem.obj: items/GlassesItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlassesItem.obj -MD -MP -MF $(DEPDIR)/GlassesItem.Tpo -c -o GlassesItem.obj `if test -f 'items/GlassesItem.cc'; then $(CYGPATH_W) 'items/GlassesItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/GlassesItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/GlassesItem.Tpo $(DEPDIR)/GlassesItem.Po
#	$(AM_V_CXX)source='items/GlassesItem.cc' object='GlassesItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlassesItem.obj `if test -f 'items/GlassesItem.cc'; then $(CYGPATH_W) 'items/GlassesItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/GlassesItem.cc'; fi`

Hammer.o: items/Hammer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Hammer.o -MD -MP -MF $(DEPDIR)/Hammer.Tpo -c -o Hammer.o `test -f 'items/Hammer.cc' || echo '$(srcdir)/'`items/Hammer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Hammer.Tpo $(DEPDIR)/Hammer.Po
#	$(AM_V_CXX)source='items/Hammer.cc' object='Hammer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Hammer.o `test -f 'items/Hammer.cc' || echo '$(srcdir)/'`items/Hammer.cc

Hammer.obj: items/Hammer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Hammer.obj -MD -MP -MF $(DEPDIR)/Hammer.Tpo -c -o Hammer.obj `if test -f 'items/Hammer.cc'; then $(CYGPATH_W) 'items/Hammer.cc'; else $(CYGPATH_W) '$(srcdir)/items/Hammer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Hammer.Tpo $(DEPDIR)/Hammer.Po
#	$(AM_V_CXX)source='items/Hammer.cc' object='Hammer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Hammer.obj `if test -f 'items/Hammer.cc'; then $(CYGPATH_W) 'items/Hammer.cc'; else $(CYGPATH_W) '$(srcdir)/items/Hammer.cc'; fi`

Landmine.o: items/Landmine.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Landmine.o -MD -MP -MF $(DEPDIR)/Landmine.Tpo -c -o Landmine.o `test -f 'items/Landmine.cc' || echo '$(srcdir)/'`items/Landmine.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Landmine.Tpo $(DEPDIR)/Landmine.Po
#	$(AM_V_CXX)source='items/Landmine.cc' object='Landmine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Landmine.o `test -f 'items/Landmine.cc' || echo '$(srcdir)/'`items/Landmine.cc

Landmine.obj: items/Landmine.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Landmine.obj -MD -MP -MF $(DEPDIR)/Landmine.Tpo -c -o Landmine.obj `if test -f 'items/Landmine.cc'; then $(CYGPATH_W) 'items/Landmine.cc'; else $(CYGPATH_W) '$(srcdir)/items/Landmine.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Landmine.Tpo $(DEPDIR)/Landmine.Po
#	$(AM_V_CXX)source='items/Landmine.cc' object='Landmine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Landmine.obj `if test -f 'items/Landmine.cc'; then $(CYGPATH_W) 'items/Landmine.cc'; else $(CYGPATH_W) '$(srcdir)/items/Landmine.cc'; fi`

Magnet.o: items/Magnet.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Magnet.o -MD -MP -MF $(DEPDIR)/Magnet.Tpo -c -o Magnet.o `test -f 'items/Magnet.cc' || echo '$(srcdir)/'`items/Magnet.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Magnet.Tpo $(DEPDIR)/Magnet.Po
#	$(AM_V_CXX)source='items/Magnet.cc' object='Magnet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Magnet.o `test -f 'items/Magnet.cc' || echo '$(srcdir)/'`items/Magnet.cc

Magnet.obj: items/Magnet.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Magnet.obj -MD -MP -MF $(DEPDIR)/Magnet.Tpo -c -o Magnet.obj `if test -f 'items/Magnet.cc'; then $(CYGPATH_W) 'items/Magnet.cc'; else $(CYGPATH_W) '$(srcdir)/items/Magnet.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Magnet.Tpo $(DEPDIR)/Magnet.Po
#	$(AM_V_CXX)source='items/Magnet.cc' object='Magnet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Magnet.obj `if test -f 'items/Magnet.cc'; then $(CYGPATH_W) 'items/Magnet.cc'; else $(CYGPATH_W) '$(srcdir)/items/Magnet.cc'; fi`

Meditation.o: items/Meditation.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Meditation.o -MD -MP -MF $(DEPDIR)/Meditation.Tpo -c -o Meditation.o `test -f 'items/Meditation.cc' || echo '$(srcdir)/'`items/Meditation.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Meditation.Tpo $(DEPDIR)/Meditation.Po
#	$(AM_V_CXX)source='items/Meditation.cc' object='Meditation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Meditation.o `test -f 'items/Meditation.cc' || echo '$(srcdir)/'`items/Meditation.cc

Meditation.obj: items/Meditation.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Meditation.obj -MD -MP -MF $(DEPDIR)/Meditation.Tpo -c -o Meditation.obj `if test -f 'items/Meditation.cc'; then $(CYGPATH_W) 'items/Meditation.cc'; else $(CYGPATH_W) '$(srcdir)/items/Meditation.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Meditation.Tpo $(DEPDIR)/Meditation.Po
#	$(AM_V_CXX)source='items/Meditation.cc' object='Meditation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Meditation.obj `if test -f 'items/Meditation.cc'; then $(CYGPATH_W) 'items/Meditation.cc'; else $(CYGPATH_W) '$(srcdir)/items/Meditation.cc'; fi`

PipeItem.o: items/PipeItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PipeItem.o -MD -MP -MF $(DEPDIR)/PipeItem.Tpo -c -o PipeItem.o `test -f 'items/PipeItem.cc' || echo '$(srcdir)/'`items/PipeItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PipeItem.Tpo $(DEPDIR)/PipeItem.Po
#	$(AM_V_CXX)source='items/PipeItem.cc' object='PipeItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PipeItem.o `test -f 'items/PipeItem.cc' || echo '$(srcdir)/'`items/PipeItem.cc

PipeItem.obj: items/PipeItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PipeItem.obj -MD -MP -MF $(DEPDIR)/PipeItem.Tpo -c -o PipeItem.obj `if test -f 'items/PipeItem.cc'; then $(CYGPATH_W) 'items/PipeItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/PipeItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PipeItem.Tpo $(DEPDIR)/PipeItem.Po
#	$(AM_V_CXX)source='items/PipeItem.cc' object='PipeItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PipeItem.obj `if test -f 'items/PipeItem.cc'; then $(CYGPATH_W) 'items/PipeItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/PipeItem.cc'; fi`

PullerItem.o: items/PullerItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PullerItem.o -MD -MP -MF $(DEPDIR)/PullerItem.Tpo -c -o PullerItem.o `test -f 'items/PullerItem.cc' || echo '$(srcdir)/'`items/PullerItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PullerItem.Tpo $(DEPDIR)/PullerItem.Po
#	$(AM_V_CXX)source='items/PullerItem.cc' object='PullerItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PullerItem.o `test -f 'items/PullerItem.cc' || echo '$(srcdir)/'`items/PullerItem.cc

PullerItem.obj: items/PullerItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PullerItem.obj -MD -MP -MF $(DEPDIR)/PullerItem.Tpo -c -o PullerItem.obj `if test -f 'items/PullerItem.cc'; then $(CYGPATH_W) 'items/PullerItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/PullerItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PullerItem.Tpo $(DEPDIR)/PullerItem.Po
#	$(AM_V_CXX)source='items/PullerItem.cc' object='PullerItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PullerItem.obj `if test -f 'items/PullerItem.cc'; then $(CYGPATH_W) 'items/PullerItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/PullerItem.cc'; fi`

RubberbandItem.o: items/RubberbandItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RubberbandItem.o -MD -MP -MF $(DEPDIR)/RubberbandItem.Tpo -c -o RubberbandItem.o `test -f 'items/RubberbandItem.cc' || echo '$(srcdir)/'`items/RubberbandItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/RubberbandItem.Tpo $(DEPDIR)/RubberbandItem.Po
#	$(AM_V_CXX)source='items/RubberbandItem.cc' object='RubberbandItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RubberbandItem.o `test -f 'items/RubberbandItem.cc' || echo '$(srcdir)/'`items/RubberbandItem.cc

RubberbandItem.obj: items/RubberbandItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RubberbandItem.obj -MD -MP -MF $(DEPDIR)/RubberbandItem.Tpo -c -o RubberbandItem.obj `if test -f 'items/RubberbandItem.cc'; then $(CYGPATH_W) 'items/RubberbandItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/RubberbandItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/RubberbandItem.Tpo $(DEPDIR)/RubberbandItem.Po
#	$(AM_V_CXX)source='items/RubberbandItem.cc' object='RubberbandItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RubberbandItem.obj `if test -f 'items/RubberbandItem.cc'; then $(CYGPATH_W) 'items/RubberbandItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/RubberbandItem.cc'; fi`

SeedItem.o: items/SeedItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SeedItem.o -MD -MP -MF $(DEPDIR)/SeedItem.Tpo -c -o SeedItem.o `test -f 'items/SeedItem.cc' || echo '$(srcdir)/'`items/SeedItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SeedItem.Tpo $(DEPDIR)/SeedItem.Po
#	$(AM_V_CXX)source='items/SeedItem.cc' object='SeedItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SeedItem.o `test -f 'items/SeedItem.cc' || echo '$(srcdir)/'`items/SeedItem.cc

SeedItem.obj: items/SeedItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SeedItem.obj -MD -MP -MF $(DEPDIR)/SeedItem.Tpo -c -o SeedItem.obj `if test -f 'items/SeedItem.cc'; then $(CYGPATH_W) 'items/SeedItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/SeedItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SeedItem.Tpo $(DEPDIR)/SeedItem.Po
#	$(AM_V_CXX)source='items/SeedItem.cc' object='SeedItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SeedItem.obj `if test -f 'items/SeedItem.cc'; then $(CYGPATH_W) 'items/SeedItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/SeedItem.cc'; fi`

Sensor.o: items/Sensor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sensor.o -MD -MP -MF $(DEPDIR)/Sensor.Tpo -c -o Sensor.o `test -f 'items/Sensor.cc' || echo '$(srcdir)/'`items/Sensor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Sensor.Tpo $(DEPDIR)/Sensor.Po
#	$(AM_V_CXX)source='items/Sensor.cc' object='Sensor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sensor.o `test -f 'items/Sensor.cc' || echo '$(srcdir)/'`items/Sensor.cc

Sensor.obj: items/Sensor.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sensor.obj -MD -MP -MF $(DEPDIR)/Sensor.Tpo -c -o Sensor.obj `if test -f 'items/Sensor.cc'; then $(CYGPATH_W) 'items/Sensor.cc'; else $(CYGPATH_W) '$(srcdir)/items/Sensor.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Sensor.Tpo $(DEPDIR)/Sensor.Po
#	$(AM_V_CXX)source='items/Sensor.cc' object='Sensor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sensor.obj `if test -f 'items/Sensor.cc'; then $(CYGPATH_W) 'items/Sensor.cc'; else $(CYGPATH_W) '$(srcdir)/items/Sensor.cc'; fi`

ShogunDot.o: items/ShogunDot.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShogunDot.o -MD -MP -MF $(DEPDIR)/ShogunDot.Tpo -c -o ShogunDot.o `test -f 'items/ShogunDot.cc' || echo '$(srcdir)/'`items/ShogunDot.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ShogunDot.Tpo $(DEPDIR)/ShogunDot.Po
#	$(AM_V_CXX)source='items/ShogunDot.cc' object='ShogunDot.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShogunDot.o `test -f 'items/ShogunDot.cc' || echo '$(srcdir)/'`items/ShogunDot.cc

ShogunDot.obj: items/ShogunDot.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShogunDot.obj -MD -MP -MF $(DEPDIR)/ShogunDot.Tpo -c -o ShogunDot.obj `if test -f 'items/ShogunDot.cc'; then $(CYGPATH_W) 'items/ShogunDot.cc'; else $(CYGPATH_W) '$(srcdir)/items/ShogunDot.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ShogunDot.Tpo $(DEPDIR)/ShogunDot.Po
#	$(AM_V_CXX)source='items/ShogunDot.cc' object='ShogunDot.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShogunDot.obj `if test -f 'items/ShogunDot.cc'; then $(CYGPATH_W) 'items/ShogunDot.cc'; else $(CYGPATH_W) '$(srcdir)/items/ShogunDot.cc'; fi`

SimpleItems.o: items/SimpleItems.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleItems.o -MD -MP -MF $(DEPDIR)/SimpleItems.Tpo -c -o SimpleItems.o `test -f 'items/SimpleItems.cc' || echo '$(srcdir)/'`items/SimpleItems.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleItems.Tpo $(DEPDIR)/SimpleItems.Po
#	$(AM_V_CXX)source='items/SimpleItems.cc' object='SimpleItems.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleItems.o `test -f 'items/SimpleItems.cc' || echo '$(srcdir)/'`items/SimpleItems.cc

SimpleItems.obj: items/SimpleItems.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleItems.obj -MD -MP -MF $(DEPDIR)/SimpleItems.Tpo -c -o SimpleItems.obj `if test -f 'items/SimpleItems.cc'; then $(CYGPATH_W) 'items/SimpleItems.cc'; else $(CYGPATH_W) '$(srcdir)/items/SimpleItems.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleItems.Tpo $(DEPDIR)/SimpleItems.Po
#	$(AM_V_CXX)source='items/SimpleItems.cc' object='SimpleItems.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleItems.obj `if test -f 'items/SimpleItems.cc'; then $(CYGPATH_W) 'items/SimpleItems.cc'; else $(CYGPATH_W) '$(srcdir)/items/SimpleItems.cc'; fi`

StripItem.o: items/StripItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StripItem.o -MD -MP -MF $(DEPDIR)/StripItem.Tpo -c -o StripItem.o `test -f 'items/StripItem.cc' || echo '$(srcdir)/'`items/StripItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/StripItem.Tpo $(DEPDIR)/StripItem.Po
#	$(AM_V_CXX)source='items/StripItem.cc' object='StripItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StripItem.o `test -f 'items/StripItem.cc' || echo '$(srcdir)/'`items/StripItem.cc

StripItem.obj: items/StripItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StripItem.obj -MD -MP -MF $(DEPDIR)/StripItem.Tpo -c -o StripItem.obj `if test -f 'items/StripItem.cc'; then $(CYGPATH_W) 'items/StripItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/StripItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/StripItem.Tpo $(DEPDIR)/StripItem.Po
#	$(AM_V_CXX)source='items/StripItem.cc' object='StripItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StripItem.obj `if test -f 'items/StripItem.cc'; then $(CYGPATH_W) 'items/StripItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/StripItem.cc'; fi`

SurpriseItem.o: items/SurpriseItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SurpriseItem.o -MD -MP -MF $(DEPDIR)/SurpriseItem.Tpo -c -o SurpriseItem.o `test -f 'items/SurpriseItem.cc' || echo '$(srcdir)/'`items/SurpriseItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SurpriseItem.Tpo $(DEPDIR)/SurpriseItem.Po
#	$(AM_V_CXX)source='items/SurpriseItem.cc' object='SurpriseItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SurpriseItem.o `test -f 'items/SurpriseItem.cc' || echo '$(srcdir)/'`items/SurpriseItem.cc

SurpriseItem.obj: items/SurpriseItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SurpriseItem.obj -MD -MP -MF $(DEPDIR)/SurpriseItem.Tpo -c -o SurpriseItem.obj `if test -f 'items/SurpriseItem.cc'; then $(CYGPATH_W) 'items/SurpriseItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/SurpriseItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SurpriseItem.Tpo $(DEPDIR)/SurpriseItem.Po
#	$(AM_V_CXX)source='items/SurpriseItem.cc' object='SurpriseItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SurpriseItem.obj `if test -f 'items/SurpriseItem.cc'; then $(CYGPATH_W) 'items/SurpriseItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/SurpriseItem.cc'; fi`

Sword.o: items/Sword.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sword.o -MD -MP -MF $(DEPDIR)/Sword.Tpo -c -o Sword.o `test -f 'items/Sword.cc' || echo '$(srcdir)/'`items/Sword.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Sword.Tpo $(DEPDIR)/Sword.Po
#	$(AM_V_CXX)source='items/Sword.cc' object='Sword.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sword.o `test -f 'items/Sword.cc' || echo '$(srcdir)/'`items/Sword.cc

Sword.obj: items/Sword.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sword.obj -MD -MP -MF $(DEPDIR)/Sword.Tpo -c -o Sword.obj `if test -f 'items/Sword.cc'; then $(CYGPATH_W) 'items/Sword.cc'; else $(CYGPATH_W) '$(srcdir)/items/Sword.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Sword.Tpo $(DEPDIR)/Sword.Po
#	$(AM_V_CXX)source='items/Sword.cc' object='Sword.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sword.obj `if test -f 'items/Sword.cc'; then $(CYGPATH_W) 'items/Sword.cc'; else $(CYGPATH_W) '$(srcdir)/items/Sword.cc'; fi`

TrapItem.o: items/TrapItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TrapItem.o -MD -MP -MF $(DEPDIR)/TrapItem.Tpo -c -o TrapItem.o `test -f 'items/TrapItem.cc' || echo '$(srcdir)/'`items/TrapItem.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/TrapItem.Tpo $(DEPDIR)/TrapItem.Po
#	$(AM_V_CXX)source='items/TrapItem.cc' object='TrapItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TrapItem.o `test -f 'items/TrapItem.cc' || echo '$(srcdir)/'`items/TrapItem.cc

TrapItem.obj: items/TrapItem.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TrapItem.obj -MD -MP -MF $(DEPDIR)/TrapItem.Tpo -c -o TrapItem.obj `if test -f 'items/TrapItem.cc'; then $(CYGPATH_W) 'items/TrapItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/TrapItem.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/TrapItem.Tpo $(DEPDIR)/TrapItem.Po
#	$(AM_V_CXX)source='items/TrapItem.cc' object='TrapItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TrapItem.obj `if test -f 'items/TrapItem.cc'; then $(CYGPATH_W) 'items/TrapItem.cc'; else $(CYGPATH_W) '$(srcdir)/items/TrapItem.cc'; fi`

Trigger.o: items/Trigger.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Trigger.o -MD -MP -MF $(DEPDIR)/Trigger.Tpo -c -o Trigger.o `test -f 'items/Trigger.cc' || echo '$(srcdir)/'`items/Trigger.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Trigger.Tpo $(DEPDIR)/Trigger.Po
#	$(AM_V_CXX)source='items/Trigger.cc' object='Trigger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Trigger.o `test -f 'items/Trigger.cc' || echo '$(srcdir)/'`items/Trigger.cc

Trigger.obj: items/Trigger.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Trigger.obj -MD -MP -MF $(DEPDIR)/Trigger.Tpo -c -o Trigger.obj `if test -f 'items/Trigger.cc'; then $(CYGPATH_W) 'items/Trigger.cc'; else $(CYGPATH_W) '$(srcdir)/items/Trigger.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Trigger.Tpo $(DEPDIR)/Trigger.Po
#	$(AM_V_CXX)source='items/Trigger.cc' object='Trigger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Trigger.obj `if test -f 'items/Trigger.cc'; then $(CYGPATH_W) 'items/Trigger.cc'; else $(CYGPATH_W) '$(srcdir)/items/Trigger.cc'; fi`

Umbrella.o: items/Umbrella.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Umbrella.o -MD -MP -MF $(DEPDIR)/Umbrella.Tpo -c -o Umbrella.o `test -f 'items/Umbrella.cc' || echo '$(srcdir)/'`items/Umbrella.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Umbrella.Tpo $(DEPDIR)/Umbrella.Po
#	$(AM_V_CXX)source='items/Umbrella.cc' object='Umbrella.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Umbrella.o `test -f 'items/Umbrella.cc' || echo '$(srcdir)/'`items/Umbrella.cc

Umbrella.obj: items/Umbrella.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Umbrella.obj -MD -MP -MF $(DEPDIR)/Umbrella.Tpo -c -o Umbrella.obj `if test -f 'items/Umbrella.cc'; then $(CYGPATH_W) 'items/Umbrella.cc'; else $(CYGPATH_W) '$(srcdir)/items/Umbrella.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Umbrella.Tpo $(DEPDIR)/Umbrella.Po
#	$(AM_V_CXX)source='items/Umbrella.cc' object='Umbrella.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Umbrella.obj `if test -f 'items/Umbrella.cc'; then $(CYGPATH_W) 'items/Umbrella.cc'; else $(CYGPATH_W) '$(srcdir)/items/Umbrella.cc'; fi`

Vortex.o: items/Vortex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Vortex.o -MD -MP -MF $(DEPDIR)/Vortex.Tpo -c -o Vortex.o `test -f 'items/Vortex.cc' || echo '$(srcdir)/'`items/Vortex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Vortex.Tpo $(DEPDIR)/Vortex.Po
#	$(AM_V_CXX)source='items/Vortex.cc' object='Vortex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Vortex.o `test -f 'items/Vortex.cc' || echo '$(srcdir)/'`items/Vortex.cc

Vortex.obj: items/Vortex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Vortex.obj -MD -MP -MF $(DEPDIR)/Vortex.Tpo -c -o Vortex.obj `if test -f 'items/Vortex.cc'; then $(CYGPATH_W) 'items/Vortex.cc'; else $(CYGPATH_W) '$(srcdir)/items/Vortex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Vortex.Tpo $(DEPDIR)/Vortex.Po
#	$(AM_V_CXX)source='items/Vortex.cc' object='Vortex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Vortex.obj `if test -f 'items/Vortex.cc'; then $(CYGPATH_W) 'items/Vortex.cc'; else $(CYGPATH_W) '$(srcdir)/items/Vortex.cc'; fi`

WormHole.o: items/WormHole.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WormHole.o -MD -MP -MF $(DEPDIR)/WormHole.Tpo -c -o WormHole.o `test -f 'items/WormHole.cc' || echo '$(srcdir)/'`items/WormHole.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/WormHole.Tpo $(DEPDIR)/WormHole.Po
#	$(AM_V_CXX)source='items/WormHole.cc' object='WormHole.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WormHole.o `test -f 'items/WormHole.cc' || echo '$(srcdir)/'`items/WormHole.cc

WormHole.obj: items/WormHole.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WormHole.obj -MD -MP -MF $(DEPDIR)/WormHole.Tpo -c -o WormHole.obj `if test -f 'items/WormHole.cc'; then $(CYGPATH_W) 'items/WormHole.cc'; else $(CYGPATH_W) '$(srcdir)/items/WormHole.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/WormHole.Tpo $(DEPDIR)/WormHole.Po
#	$(AM_V_CXX)source='items/WormHole.cc' object='WormHole.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WormHole.obj `if test -f 'items/WormHole.cc'; then $(CYGPATH_W) 'items/WormHole.cc'; else $(CYGPATH_W) '$(srcdir)/items/WormHole.cc'; fi`

Index.o: lev/Index.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Index.o -MD -MP -MF $(DEPDIR)/Index.Tpo -c -o Index.o `test -f 'lev/Index.cc' || echo '$(srcdir)/'`lev/Index.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Index.Tpo $(DEPDIR)/Index.Po
#	$(AM_V_CXX)source='lev/Index.cc' object='Index.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Index.o `test -f 'lev/Index.cc' || echo '$(srcdir)/'`lev/Index.cc

Index.obj: lev/Index.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Index.obj -MD -MP -MF $(DEPDIR)/Index.Tpo -c -o Index.obj `if test -f 'lev/Index.cc'; then $(CYGPATH_W) 'lev/Index.cc'; else $(CYGPATH_W) '$(srcdir)/lev/Index.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Index.Tpo $(DEPDIR)/Index.Po
#	$(AM_V_CXX)source='lev/Index.cc' object='Index.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Index.obj `if test -f 'lev/Index.cc'; then $(CYGPATH_W) 'lev/Index.cc'; else $(CYGPATH_W) '$(srcdir)/lev/Index.cc'; fi`

RatingManager.o: lev/RatingManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RatingManager.o -MD -MP -MF $(DEPDIR)/RatingManager.Tpo -c -o RatingManager.o `test -f 'lev/RatingManager.cc' || echo '$(srcdir)/'`lev/RatingManager.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/RatingManager.Tpo $(DEPDIR)/RatingManager.Po
#	$(AM_V_CXX)source='lev/RatingManager.cc' object='RatingManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RatingManager.o `test -f 'lev/RatingManager.cc' || echo '$(srcdir)/'`lev/RatingManager.cc

RatingManager.obj: lev/RatingManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RatingManager.obj -MD -MP -MF $(DEPDIR)/RatingManager.Tpo -c -o RatingManager.obj `if test -f 'lev/RatingManager.cc'; then $(CYGPATH_W) 'lev/RatingManager.cc'; else $(CYGPATH_W) '$(srcdir)/lev/RatingManager.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/RatingManager.Tpo $(DEPDIR)/RatingManager.Po
#	$(AM_V_CXX)source='lev/RatingManager.cc' object='RatingManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RatingManager.obj `if test -f 'lev/RatingManager.cc'; then $(CYGPATH_W) 'lev/RatingManager.cc'; else $(CYGPATH_W) '$(srcdir)/lev/RatingManager.cc'; fi`

PersistentIndex.o: lev/PersistentIndex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PersistentIndex.o -MD -MP -MF $(DEPDIR)/PersistentIndex.Tpo -c -o PersistentIndex.o `test -f 'lev/PersistentIndex.cc' || echo '$(srcdir)/'`lev/PersistentIndex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PersistentIndex.Tpo $(DEPDIR)/PersistentIndex.Po
#	$(AM_V_CXX)source='lev/PersistentIndex.cc' object='PersistentIndex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PersistentIndex.o `test -f 'lev/PersistentIndex.cc' || echo '$(srcdir)/'`lev/PersistentIndex.cc

PersistentIndex.obj: lev/PersistentIndex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PersistentIndex.obj -MD -MP -MF $(DEPDIR)/PersistentIndex.Tpo -c -o PersistentIndex.obj `if test -f 'lev/PersistentIndex.cc'; then $(CYGPATH_W) 'lev/PersistentIndex.cc'; else $(CYGPATH_W) '$(srcdir)/lev/PersistentIndex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PersistentIndex.Tpo $(DEPDIR)/PersistentIndex.Po
#	$(AM_V_CXX)source='lev/PersistentIndex.cc' object='PersistentIndex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PersistentIndex.obj `if test -f 'lev/PersistentIndex.cc'; then $(CYGPATH_W) 'lev/PersistentIndex.cc'; else $(CYGPATH_W) '$(srcdir)/lev/PersistentIndex.cc'; fi`

Proxy.o: lev/Proxy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Proxy.o -MD -MP -MF $(DEPDIR)/Proxy.Tpo -c -o Proxy.o `test -f 'lev/Proxy.cc' || echo '$(srcdir)/'`lev/Proxy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Proxy.Tpo $(DEPDIR)/Proxy.Po
#	$(AM_V_CXX)source='lev/Proxy.cc' object='Proxy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Proxy.o `test -f 'lev/Proxy.cc' || echo '$(srcdir)/'`lev/Proxy.cc

Proxy.obj: lev/Proxy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Proxy.obj -MD -MP -MF $(DEPDIR)/Proxy.Tpo -c -o Proxy.obj `if test -f 'lev/Proxy.cc'; then $(CYGPATH_W) 'lev/Proxy.cc'; else $(CYGPATH_W) '$(srcdir)/lev/Proxy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Proxy.Tpo $(DEPDIR)/Proxy.Po
#	$(AM_V_CXX)source='lev/Proxy.cc' object='Proxy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Proxy.obj `if test -f 'lev/Proxy.cc'; then $(CYGPATH_W) 'lev/Proxy.cc'; else $(CYGPATH_W) '$(srcdir)/lev/Proxy.cc'; fi`

ScoreManager.o: lev/ScoreManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScoreManager.o -MD -MP -MF $(DEPDIR)/ScoreManager.Tpo -c -o ScoreManager.o `test -f 'lev/ScoreManager.cc' || echo '$(srcdir)/'`lev/ScoreManager.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScoreManager.Tpo $(DEPDIR)/ScoreManager.Po
#	$(AM_V_CXX)source='lev/ScoreManager.cc' object='ScoreManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScoreManager.o `test -f 'lev/ScoreManager.cc' || echo '$(srcdir)/'`lev/ScoreManager.cc

ScoreManager.obj: lev/ScoreManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScoreManager.obj -MD -MP -MF $(DEPDIR)/ScoreManager.Tpo -c -o ScoreManager.obj `if test -f 'lev/ScoreManager.cc'; then $(CYGPATH_W) 'lev/ScoreManager.cc'; else $(CYGPATH_W) '$(srcdir)/lev/ScoreManager.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScoreManager.Tpo $(DEPDIR)/ScoreManager.Po
#	$(AM_V_CXX)source='lev/ScoreManager.cc' object='ScoreManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScoreManager.obj `if test -f 'lev/ScoreManager.cc'; then $(CYGPATH_W) 'lev/ScoreManager.cc'; else $(CYGPATH_W) '$(srcdir)/lev/ScoreManager.cc'; fi`

SubProxy.o: lev/SubProxy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SubProxy.o -MD -MP -MF $(DEPDIR)/SubProxy.Tpo -c -o SubProxy.o `test -f 'lev/SubProxy.cc' || echo '$(srcdir)/'`lev/SubProxy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SubProxy.Tpo $(DEPDIR)/SubProxy.Po
#	$(AM_V_CXX)source='lev/SubProxy.cc' object='SubProxy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SubProxy.o `test -f 'lev/SubProxy.cc' || echo '$(srcdir)/'`lev/SubProxy.cc

SubProxy.obj: lev/SubProxy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SubProxy.obj -MD -MP -MF $(DEPDIR)/SubProxy.Tpo -c -o SubProxy.obj `if test -f 'lev/SubProxy.cc'; then $(CYGPATH_W) 'lev/SubProxy.cc'; else $(CYGPATH_W) '$(srcdir)/lev/SubProxy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SubProxy.Tpo $(DEPDIR)/SubProxy.Po
#	$(AM_V_CXX)source='lev/SubProxy.cc' object='SubProxy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SubProxy.obj `if test -f 'lev/SubProxy.cc'; then $(CYGPATH_W) 'lev/SubProxy.cc'; else $(CYGPATH_W) '$(srcdir)/lev/SubProxy.cc'; fi`

VolatileIndex.o: lev/VolatileIndex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VolatileIndex.o -MD -MP -MF $(DEPDIR)/VolatileIndex.Tpo -c -o VolatileIndex.o `test -f 'lev/VolatileIndex.cc' || echo '$(srcdir)/'`lev/VolatileIndex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/VolatileIndex.Tpo $(DEPDIR)/VolatileIndex.Po
#	$(AM_V_CXX)source='lev/VolatileIndex.cc' object='VolatileIndex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VolatileIndex.o `test -f 'lev/VolatileIndex.cc' || echo '$(srcdir)/'`lev/VolatileIndex.cc

VolatileIndex.obj: lev/VolatileIndex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VolatileIndex.obj -MD -MP -MF $(DEPDIR)/VolatileIndex.Tpo -c -o VolatileIndex.obj `if test -f 'lev/VolatileIndex.cc'; then $(CYGPATH_W) 'lev/VolatileIndex.cc'; else $(CYGPATH_W) '$(srcdir)/lev/VolatileIndex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/VolatileIndex.Tpo $(DEPDIR)/VolatileIndex.Po
#	$(AM_V_CXX)source='lev/VolatileIndex.cc' object='VolatileIndex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VolatileIndex.obj `if test -f 'lev/VolatileIndex.cc'; then $(CYGPATH_W) 'lev/VolatileIndex.cc'; else $(CYGPATH_W) '$(srcdir)/lev/VolatileIndex.cc'; fi`

CannonBall.o: others/CannonBall.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CannonBall.o -MD -MP -MF $(DEPDIR)/CannonBall.Tpo -c -o CannonBall.o `test -f 'others/CannonBall.cc' || echo '$(srcdir)/'`others/CannonBall.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CannonBall.Tpo $(DEPDIR)/CannonBall.Po
#	$(AM_V_CXX)source='others/CannonBall.cc' object='CannonBall.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CannonBall.o `test -f 'others/CannonBall.cc' || echo '$(srcdir)/'`others/CannonBall.cc

CannonBall.obj: others/CannonBall.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CannonBall.obj -MD -MP -MF $(DEPDIR)/CannonBall.Tpo -c -o CannonBall.obj `if test -f 'others/CannonBall.cc'; then $(CYGPATH_W) 'others/CannonBall.cc'; else $(CYGPATH_W) '$(srcdir)/others/CannonBall.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CannonBall.Tpo $(DEPDIR)/CannonBall.Po
#	$(AM_V_CXX)source='others/CannonBall.cc' object='CannonBall.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CannonBall.obj `if test -f 'others/CannonBall.cc'; then $(CYGPATH_W) 'others/CannonBall.cc'; else $(CYGPATH_W) '$(srcdir)/others/CannonBall.cc'; fi`

CounterGadget.o: others/CounterGadget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CounterGadget.o -MD -MP -MF $(DEPDIR)/CounterGadget.Tpo -c -o CounterGadget.o `test -f 'others/CounterGadget.cc' || echo '$(srcdir)/'`others/CounterGadget.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CounterGadget.Tpo $(DEPDIR)/CounterGadget.Po
#	$(AM_V_CXX)source='others/CounterGadget.cc' object='CounterGadget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CounterGadget.o `test -f 'others/CounterGadget.cc' || echo '$(srcdir)/'`others/CounterGadget.cc

CounterGadget.obj: others/CounterGadget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CounterGadget.obj -MD -MP -MF $(DEPDIR)/CounterGadget.Tpo -c -o CounterGadget.obj `if test -f 'others/CounterGadget.cc'; then $(CYGPATH_W) 'others/CounterGadget.cc'; else $(CYGPATH_W) '$(srcdir)/others/CounterGadget.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CounterGadget.Tpo $(DEPDIR)/CounterGadget.Po
#	$(AM_V_CXX)source='others/CounterGadget.cc' object='CounterGadget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CounterGadget.obj `if test -f 'others/CounterGadget.cc'; then $(CYGPATH_W) 'others/CounterGadget.cc'; else $(CYGPATH_W) '$(srcdir)/others/CounterGadget.cc'; fi`

Other.o: others/Other.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Other.o -MD -MP -MF $(DEPDIR)/Other.Tpo -c -o Other.o `test -f 'others/Other.cc' || echo '$(srcdir)/'`others/Other.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Other.Tpo $(DEPDIR)/Other.Po
#	$(AM_V_CXX)source='others/Other.cc' object='Other.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Other.o `test -f 'others/Other.cc' || echo '$(srcdir)/'`others/Other.cc

Other.obj: others/Other.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Other.obj -MD -MP -MF $(DEPDIR)/Other.Tpo -c -o Other.obj `if test -f 'others/Other.cc'; then $(CYGPATH_W) 'others/Other.cc'; else $(CYGPATH_W) '$(srcdir)/others/Other.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Other.Tpo $(DEPDIR)/Other.Po
#	$(AM_V_CXX)source='others/Other.cc' object='Other.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Other.obj `if test -f 'others/Other.cc'; then $(CYGPATH_W) 'others/Other.cc'; else $(CYGPATH_W) '$(srcdir)/others/Other.cc'; fi`

Rubberband.o: others/Rubberband.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rubberband.o -MD -MP -MF $(DEPDIR)/Rubberband.Tpo -c -o Rubberband.o `test -f 'others/Rubberband.cc' || echo '$(srcdir)/'`others/Rubberband.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Rubberband.Tpo $(DEPDIR)/Rubberband.Po
#	$(AM_V_CXX)source='others/Rubberband.cc' object='Rubberband.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rubberband.o `test -f 'others/Rubberband.cc' || echo '$(srcdir)/'`others/Rubberband.cc

Rubberband.obj: others/Rubberband.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rubberband.obj -MD -MP -MF $(DEPDIR)/Rubberband.Tpo -c -o Rubberband.obj `if test -f 'others/Rubberband.cc'; then $(CYGPATH_W) 'others/Rubberband.cc'; else $(CYGPATH_W) '$(srcdir)/others/Rubberband.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Rubberband.Tpo $(DEPDIR)/Rubberband.Po
#	$(AM_V_CXX)source='others/Rubberband.cc' object='Rubberband.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rubberband.obj `if test -f 'others/Rubberband.cc'; then $(CYGPATH_W) 'others/Rubberband.cc'; else $(CYGPATH_W) '$(srcdir)/others/Rubberband.cc'; fi`

TimerGadget.o: others/TimerGadget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimerGadget.o -MD -MP -MF $(DEPDIR)/TimerGadget.Tpo -c -o TimerGadget.o `test -f 'others/TimerGadget.cc' || echo '$(srcdir)/'`others/TimerGadget.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/TimerGadget.Tpo $(DEPDIR)/TimerGadget.Po
#	$(AM_V_CXX)source='others/TimerGadget.cc' object='TimerGadget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimerGadget.o `test -f 'others/TimerGadget.cc' || echo '$(srcdir)/'`others/TimerGadget.cc

TimerGadget.obj: others/TimerGadget.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimerGadget.obj -MD -MP -MF $(DEPDIR)/TimerGadget.Tpo -c -o TimerGadget.obj `if test -f 'others/TimerGadget.cc'; then $(CYGPATH_W) 'others/TimerGadget.cc'; else $(CYGPATH_W) '$(srcdir)/others/TimerGadget.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/TimerGadget.Tpo $(DEPDIR)/TimerGadget.Po
#	$(AM_V_CXX)source='others/TimerGadget.cc' object='TimerGadget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimerGadget.obj `if test -f 'others/TimerGadget.cc'; then $(CYGPATH_W) 'others/TimerGadget.cc'; else $(CYGPATH_W) '$(srcdir)/others/TimerGadget.cc'; fi`

Wire.o: others/Wire.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Wire.o -MD -MP -MF $(DEPDIR)/Wire.Tpo -c -o Wire.o `test -f 'others/Wire.cc' || echo '$(srcdir)/'`others/Wire.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Wire.Tpo $(DEPDIR)/Wire.Po
#	$(AM_V_CXX)source='others/Wire.cc' object='Wire.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Wire.o `test -f 'others/Wire.cc' || echo '$(srcdir)/'`others/Wire.cc

Wire.obj: others/Wire.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Wire.obj -MD -MP -MF $(DEPDIR)/Wire.Tpo -c -o Wire.obj `if test -f 'others/Wire.cc'; then $(CYGPATH_W) 'others/Wire.cc'; else $(CYGPATH_W) '$(srcdir)/others/Wire.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Wire.Tpo $(DEPDIR)/Wire.Po
#	$(AM_V_CXX)source='others/Wire.cc' object='Wire.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Wire.obj `if test -f 'others/Wire.cc'; then $(CYGPATH_W) 'others/Wire.cc'; else $(CYGPATH_W) '$(srcdir)/others/Wire.cc'; fi`

ActorImpulseStone.o: stones/ActorImpulseStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActorImpulseStone.o -MD -MP -MF $(DEPDIR)/ActorImpulseStone.Tpo -c -o ActorImpulseStone.o `test -f 'stones/ActorImpulseStone.cc' || echo '$(srcdir)/'`stones/ActorImpulseStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ActorImpulseStone.Tpo $(DEPDIR)/ActorImpulseStone.Po
#	$(AM_V_CXX)source='stones/ActorImpulseStone.cc' object='ActorImpulseStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActorImpulseStone.o `test -f 'stones/ActorImpulseStone.cc' || echo '$(srcdir)/'`stones/ActorImpulseStone.cc

ActorImpulseStone.obj: stones/ActorImpulseStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActorImpulseStone.obj -MD -MP -MF $(DEPDIR)/ActorImpulseStone.Tpo -c -o ActorImpulseStone.obj `if test -f 'stones/ActorImpulseStone.cc'; then $(CYGPATH_W) 'stones/ActorImpulseStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ActorImpulseStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ActorImpulseStone.Tpo $(DEPDIR)/ActorImpulseStone.Po
#	$(AM_V_CXX)source='stones/ActorImpulseStone.cc' object='ActorImpulseStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActorImpulseStone.obj `if test -f 'stones/ActorImpulseStone.cc'; then $(CYGPATH_W) 'stones/ActorImpulseStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ActorImpulseStone.cc'; fi`

BarrierStone.o: stones/BarrierStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BarrierStone.o -MD -MP -MF $(DEPDIR)/BarrierStone.Tpo -c -o BarrierStone.o `test -f 'stones/BarrierStone.cc' || echo '$(srcdir)/'`stones/BarrierStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BarrierStone.Tpo $(DEPDIR)/BarrierStone.Po
#	$(AM_V_CXX)source='stones/BarrierStone.cc' object='BarrierStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BarrierStone.o `test -f 'stones/BarrierStone.cc' || echo '$(srcdir)/'`stones/BarrierStone.cc

BarrierStone.obj: stones/BarrierStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BarrierStone.obj -MD -MP -MF $(DEPDIR)/BarrierStone.Tpo -c -o BarrierStone.obj `if test -f 'stones/BarrierStone.cc'; then $(CYGPATH_W) 'stones/BarrierStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BarrierStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BarrierStone.Tpo $(DEPDIR)/BarrierStone.Po
#	$(AM_V_CXX)source='stones/BarrierStone.cc' object='BarrierStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BarrierStone.obj `if test -f 'stones/BarrierStone.cc'; then $(CYGPATH_W) 'stones/BarrierStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BarrierStone.cc'; fi`

BlockerStone.o: stones/BlockerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BlockerStone.o -MD -MP -MF $(DEPDIR)/BlockerStone.Tpo -c -o BlockerStone.o `test -f 'stones/BlockerStone.cc' || echo '$(srcdir)/'`stones/BlockerStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BlockerStone.Tpo $(DEPDIR)/BlockerStone.Po
#	$(AM_V_CXX)source='stones/BlockerStone.cc' object='BlockerStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BlockerStone.o `test -f 'stones/BlockerStone.cc' || echo '$(srcdir)/'`stones/BlockerStone.cc

BlockerStone.obj: stones/BlockerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BlockerStone.obj -MD -MP -MF $(DEPDIR)/BlockerStone.Tpo -c -o BlockerStone.obj `if test -f 'stones/BlockerStone.cc'; then $(CYGPATH_W) 'stones/BlockerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BlockerStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BlockerStone.Tpo $(DEPDIR)/BlockerStone.Po
#	$(AM_V_CXX)source='stones/BlockerStone.cc' object='BlockerStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BlockerStone.obj `if test -f 'stones/BlockerStone.cc'; then $(CYGPATH_W) 'stones/BlockerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BlockerStone.cc'; fi`

BoulderStone.o: stones/BoulderStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BoulderStone.o -MD -MP -MF $(DEPDIR)/BoulderStone.Tpo -c -o BoulderStone.o `test -f 'stones/BoulderStone.cc' || echo '$(srcdir)/'`stones/BoulderStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BoulderStone.Tpo $(DEPDIR)/BoulderStone.Po
#	$(AM_V_CXX)source='stones/BoulderStone.cc' object='BoulderStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BoulderStone.o `test -f 'stones/BoulderStone.cc' || echo '$(srcdir)/'`stones/BoulderStone.cc

BoulderStone.obj: stones/BoulderStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BoulderStone.obj -MD -MP -MF $(DEPDIR)/BoulderStone.Tpo -c -o BoulderStone.obj `if test -f 'stones/BoulderStone.cc'; then $(CYGPATH_W) 'stones/BoulderStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BoulderStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BoulderStone.Tpo $(DEPDIR)/BoulderStone.Po
#	$(AM_V_CXX)source='stones/BoulderStone.cc' object='BoulderStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BoulderStone.obj `if test -f 'stones/BoulderStone.cc'; then $(CYGPATH_W) 'stones/BoulderStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BoulderStone.cc'; fi`

BrakeStone.o: stones/BrakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrakeStone.o -MD -MP -MF $(DEPDIR)/BrakeStone.Tpo -c -o BrakeStone.o `test -f 'stones/BrakeStone.cc' || echo '$(srcdir)/'`stones/BrakeStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BrakeStone.Tpo $(DEPDIR)/BrakeStone.Po
#	$(AM_V_CXX)source='stones/BrakeStone.cc' object='BrakeStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrakeStone.o `test -f 'stones/BrakeStone.cc' || echo '$(srcdir)/'`stones/BrakeStone.cc

BrakeStone.obj: stones/BrakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrakeStone.obj -MD -MP -MF $(DEPDIR)/BrakeStone.Tpo -c -o BrakeStone.obj `if test -f 'stones/BrakeStone.cc'; then $(CYGPATH_W) 'stones/BrakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BrakeStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BrakeStone.Tpo $(DEPDIR)/BrakeStone.Po
#	$(AM_V_CXX)source='stones/BrakeStone.cc' object='BrakeStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrakeStone.obj `if test -f 'stones/BrakeStone.cc'; then $(CYGPATH_W) 'stones/BrakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BrakeStone.cc'; fi`

BreakStone.o: stones/BreakStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BreakStone.o -MD -MP -MF $(DEPDIR)/BreakStone.Tpo -c -o BreakStone.o `test -f 'stones/BreakStone.cc' || echo '$(srcdir)/'`stones/BreakStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BreakStone.Tpo $(DEPDIR)/BreakStone.Po
#	$(AM_V_CXX)source='stones/BreakStone.cc' object='BreakStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BreakStone.o `test -f 'stones/BreakStone.cc' || echo '$(srcdir)/'`stones/BreakStone.cc

BreakStone.obj: stones/BreakStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BreakStone.obj -MD -MP -MF $(DEPDIR)/BreakStone.Tpo -c -o BreakStone.obj `if test -f 'stones/BreakStone.cc'; then $(CYGPATH_W) 'stones/BreakStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BreakStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BreakStone.Tpo $(DEPDIR)/BreakStone.Po
#	$(AM_V_CXX)source='stones/BreakStone.cc' object='BreakStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BreakStone.obj `if test -f 'stones/BreakStone.cc'; then $(CYGPATH_W) 'stones/BreakStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BreakStone.cc'; fi`

ChameleonStone.o: stones/ChameleonStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ChameleonStone.o -MD -MP -MF $(DEPDIR)/ChameleonStone.Tpo -c -o ChameleonStone.o `test -f 'stones/ChameleonStone.cc' || echo '$(srcdir)/'`stones/ChameleonStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ChameleonStone.Tpo $(DEPDIR)/ChameleonStone.Po
#	$(AM_V_CXX)source='stones/ChameleonStone.cc' object='ChameleonStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ChameleonStone.o `test -f 'stones/ChameleonStone.cc' || echo '$(srcdir)/'`stones/ChameleonStone.cc

ChameleonStone.obj: stones/ChameleonStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ChameleonStone.obj -MD -MP -MF $(DEPDIR)/ChameleonStone.Tpo -c -o ChameleonStone.obj `if test -f 'stones/ChameleonStone.cc'; then $(CYGPATH_W) 'stones/ChameleonStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ChameleonStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ChameleonStone.Tpo $(DEPDIR)/ChameleonStone.Po
#	$(AM_V_CXX)source='stones/ChameleonStone.cc' object='ChameleonStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ChameleonStone.obj `if test -f 'stones/ChameleonStone.cc'; then $(CYGPATH_W) 'stones/ChameleonStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ChameleonStone.cc'; fi`

ChessStone.o: stones/ChessStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ChessStone.o -MD -MP -MF $(DEPDIR)/ChessStone.Tpo -c -o ChessStone.o `test -f 'stones/ChessStone.cc' || echo '$(srcdir)/'`stones/ChessStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ChessStone.Tpo $(DEPDIR)/ChessStone.Po
#	$(AM_V_CXX)source='stones/ChessStone.cc' object='ChessStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ChessStone.o `test -f 'stones/ChessStone.cc' || echo '$(srcdir)/'`stones/ChessStone.cc

ChessStone.obj: stones/ChessStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ChessStone.obj -MD -MP -MF $(DEPDIR)/ChessStone.Tpo -c -o ChessStone.obj `if test -f 'stones/ChessStone.cc'; then $(CYGPATH_W) 'stones/ChessStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ChessStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ChessStone.Tpo $(DEPDIR)/ChessStone.Po
#	$(AM_V_CXX)source='stones/ChessStone.cc' object='ChessStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ChessStone.obj `if test -f 'stones/ChessStone.cc'; then $(CYGPATH_W) 'stones/ChessStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ChessStone.cc'; fi`

ClusterStone.o: stones/ClusterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ClusterStone.o -MD -MP -MF $(DEPDIR)/ClusterStone.Tpo -c -o ClusterStone.o `test -f 'stones/ClusterStone.cc' || echo '$(srcdir)/'`stones/ClusterStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ClusterStone.Tpo $(DEPDIR)/ClusterStone.Po
#	$(AM_V_CXX)source='stones/ClusterStone.cc' object='ClusterStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ClusterStone.o `test -f 'stones/ClusterStone.cc' || echo '$(srcdir)/'`stones/ClusterStone.cc

ClusterStone.obj: stones/ClusterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ClusterStone.obj -MD -MP -MF $(DEPDIR)/ClusterStone.Tpo -c -o ClusterStone.obj `if test -f 'stones/ClusterStone.cc'; then $(CYGPATH_W) 'stones/ClusterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ClusterStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ClusterStone.Tpo $(DEPDIR)/ClusterStone.Po
#	$(AM_V_CXX)source='stones/ClusterStone.cc' object='ClusterStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ClusterStone.obj `if test -f 'stones/ClusterStone.cc'; then $(CYGPATH_W) 'stones/ClusterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ClusterStone.cc'; fi`

CoinSlot.o: stones/CoinSlot.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoinSlot.o -MD -MP -MF $(DEPDIR)/CoinSlot.Tpo -c -o CoinSlot.o `test -f 'stones/CoinSlot.cc' || echo '$(srcdir)/'`stones/CoinSlot.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoinSlot.Tpo $(DEPDIR)/CoinSlot.Po
#	$(AM_V_CXX)source='stones/CoinSlot.cc' object='CoinSlot.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoinSlot.o `test -f 'stones/CoinSlot.cc' || echo '$(srcdir)/'`stones/CoinSlot.cc

CoinSlot.obj: stones/CoinSlot.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoinSlot.obj -MD -MP -MF $(DEPDIR)/CoinSlot.Tpo -c -o CoinSlot.obj `if test -f 'stones/CoinSlot.cc'; then $(CYGPATH_W) 'stones/CoinSlot.cc'; else $(CYGPATH_W) '$(srcdir)/stones/CoinSlot.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoinSlot.Tpo $(DEPDIR)/CoinSlot.Po
#	$(AM_V_CXX)source='stones/CoinSlot.cc' object='CoinSlot.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoinSlot.obj `if test -f 'stones/CoinSlot.cc'; then $(CYGPATH_W) 'stones/CoinSlot.cc'; else $(CYGPATH_W) '$(srcdir)/stones/CoinSlot.cc'; fi`

CompatibilityStones.o: stones/CompatibilityStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompatibilityStones.o -MD -MP -MF $(DEPDIR)/CompatibilityStones.Tpo -c -o CompatibilityStones.o `test -f 'stones/CompatibilityStones.cc' || echo '$(srcdir)/'`stones/CompatibilityStones.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/CompatibilityStones.Tpo $(DEPDIR)/CompatibilityStones.Po
#	$(AM_V_CXX)source='stones/CompatibilityStones.cc' object='CompatibilityStones.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompatibilityStones.o `test -f 'stones/CompatibilityStones.cc' || echo '$(srcdir)/'`stones/CompatibilityStones.cc

CompatibilityStones.obj: stones/CompatibilityStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompatibilityStones.obj -MD -MP -MF $(DEPDIR)/CompatibilityStones.Tpo -c -o CompatibilityStones.obj `if test -f 'stones/CompatibilityStones.cc'; then $(CYGPATH_W) 'stones/CompatibilityStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/CompatibilityStones.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/CompatibilityStones.Tpo $(DEPDIR)/CompatibilityStones.Po
#	$(AM_V_CXX)source='stones/CompatibilityStones.cc' object='CompatibilityStones.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompatibilityStones.obj `if test -f 'stones/CompatibilityStones.cc'; then $(CYGPATH_W) 'stones/CompatibilityStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/CompatibilityStones.cc'; fi`

DeathStone.o: stones/DeathStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DeathStone.o -MD -MP -MF $(DEPDIR)/DeathStone.Tpo -c -o DeathStone.o `test -f 'stones/DeathStone.cc' || echo '$(srcdir)/'`stones/DeathStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/DeathStone.Tpo $(DEPDIR)/DeathStone.Po
#	$(AM_V_CXX)source='stones/DeathStone.cc' object='DeathStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DeathStone.o `test -f 'stones/DeathStone.cc' || echo '$(srcdir)/'`stones/DeathStone.cc

DeathStone.obj: stones/DeathStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DeathStone.obj -MD -MP -MF $(DEPDIR)/DeathStone.Tpo -c -o DeathStone.obj `if test -f 'stones/DeathStone.cc'; then $(CYGPATH_W) 'stones/DeathStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DeathStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/DeathStone.Tpo $(DEPDIR)/DeathStone.Po
#	$(AM_V_CXX)source='stones/DeathStone.cc' object='DeathStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DeathStone.obj `if test -f 'stones/DeathStone.cc'; then $(CYGPATH_W) 'stones/DeathStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DeathStone.cc'; fi`

DiscoStone.o: stones/DiscoStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DiscoStone.o -MD -MP -MF $(DEPDIR)/DiscoStone.Tpo -c -o DiscoStone.o `test -f 'stones/DiscoStone.cc' || echo '$(srcdir)/'`stones/DiscoStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/DiscoStone.Tpo $(DEPDIR)/DiscoStone.Po
#	$(AM_V_CXX)source='stones/DiscoStone.cc' object='DiscoStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DiscoStone.o `test -f 'stones/DiscoStone.cc' || echo '$(srcdir)/'`stones/DiscoStone.cc

DiscoStone.obj: stones/DiscoStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DiscoStone.obj -MD -MP -MF $(DEPDIR)/DiscoStone.Tpo -c -o DiscoStone.obj `if test -f 'stones/DiscoStone.cc'; then $(CYGPATH_W) 'stones/DiscoStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DiscoStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/DiscoStone.Tpo $(DEPDIR)/DiscoStone.Po
#	$(AM_V_CXX)source='stones/DiscoStone.cc' object='DiscoStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DiscoStone.obj `if test -f 'stones/DiscoStone.cc'; then $(CYGPATH_W) 'stones/DiscoStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DiscoStone.cc'; fi`

DispenserStone.o: stones/DispenserStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DispenserStone.o -MD -MP -MF $(DEPDIR)/DispenserStone.Tpo -c -o DispenserStone.o `test -f 'stones/DispenserStone.cc' || echo '$(srcdir)/'`stones/DispenserStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/DispenserStone.Tpo $(DEPDIR)/DispenserStone.Po
#	$(AM_V_CXX)source='stones/DispenserStone.cc' object='DispenserStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DispenserStone.o `test -f 'stones/DispenserStone.cc' || echo '$(srcdir)/'`stones/DispenserStone.cc

DispenserStone.obj: stones/DispenserStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DispenserStone.obj -MD -MP -MF $(DEPDIR)/DispenserStone.Tpo -c -o DispenserStone.obj `if test -f 'stones/DispenserStone.cc'; then $(CYGPATH_W) 'stones/DispenserStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DispenserStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/DispenserStone.Tpo $(DEPDIR)/DispenserStone.Po
#	$(AM_V_CXX)source='stones/DispenserStone.cc' object='DispenserStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DispenserStone.obj `if test -f 'stones/DispenserStone.cc'; then $(CYGPATH_W) 'stones/DispenserStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/DispenserStone.cc'; fi`

Door.o: stones/Door.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Door.o -MD -MP -MF $(DEPDIR)/Door.Tpo -c -o Door.o `test -f 'stones/Door.cc' || echo '$(srcdir)/'`stones/Door.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Door.Tpo $(DEPDIR)/Door.Po
#	$(AM_V_CXX)source='stones/Door.cc' object='Door.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Door.o `test -f 'stones/Door.cc' || echo '$(srcdir)/'`stones/Door.cc

Door.obj: stones/Door.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Door.obj -MD -MP -MF $(DEPDIR)/Door.Tpo -c -o Door.obj `if test -f 'stones/Door.cc'; then $(CYGPATH_W) 'stones/Door.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Door.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Door.Tpo $(DEPDIR)/Door.Po
#	$(AM_V_CXX)source='stones/Door.cc' object='Door.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Door.obj `if test -f 'stones/Door.cc'; then $(CYGPATH_W) 'stones/Door.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Door.cc'; fi`

FakeStone.o: stones/FakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FakeStone.o -MD -MP -MF $(DEPDIR)/FakeStone.Tpo -c -o FakeStone.o `test -f 'stones/FakeStone.cc' || echo '$(srcdir)/'`stones/FakeStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/FakeStone.Tpo $(DEPDIR)/FakeStone.Po
#	$(AM_V_CXX)source='stones/FakeStone.cc' object='FakeStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FakeStone.o `test -f 'stones/FakeStone.cc' || echo '$(srcdir)/'`stones/FakeStone.cc

FakeStone.obj: stones/FakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FakeStone.obj -MD -MP -MF $(DEPDIR)/FakeStone.Tpo -c -o FakeStone.obj `if test -f 'stones/FakeStone.cc'; then $(CYGPATH_W) 'stones/FakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FakeStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/FakeStone.Tpo $(DEPDIR)/FakeStone.Po
#	$(AM_V_CXX)source='stones/FakeStone.cc' object='FakeStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FakeStone.obj `if test -f 'stones/FakeStone.cc'; then $(CYGPATH_W) 'stones/FakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FakeStone.cc'; fi`

FlatStone.o: stones/FlatStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FlatStone.o -MD -MP -MF $(DEPDIR)/FlatStone.Tpo -c -o FlatStone.o `test -f 'stones/FlatStone.cc' || echo '$(srcdir)/'`stones/FlatStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/FlatStone.Tpo $(DEPDIR)/FlatStone.Po
#	$(AM_V_CXX)source='stones/FlatStone.cc' object='FlatStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FlatStone.o `test -f 'stones/FlatStone.cc' || echo '$(srcdir)/'`stones/FlatStone.cc

FlatStone.obj: stones/FlatStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FlatStone.obj -MD -MP -MF $(DEPDIR)/FlatStone.Tpo -c -o FlatStone.obj `if test -f 'stones/FlatStone.cc'; then $(CYGPATH_W) 'stones/FlatStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FlatStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/FlatStone.Tpo $(DEPDIR)/FlatStone.Po
#	$(AM_V_CXX)source='stones/FlatStone.cc' object='FlatStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FlatStone.obj `if test -f 'stones/FlatStone.cc'; then $(CYGPATH_W) 'stones/FlatStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FlatStone.cc'; fi`

BoxStone.o: stones/BoxStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BoxStone.o -MD -MP -MF $(DEPDIR)/BoxStone.Tpo -c -o BoxStone.o `test -f 'stones/BoxStone.cc' || echo '$(srcdir)/'`stones/BoxStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/BoxStone.Tpo $(DEPDIR)/BoxStone.Po
#	$(AM_V_CXX)source='stones/BoxStone.cc' object='BoxStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BoxStone.o `test -f 'stones/BoxStone.cc' || echo '$(srcdir)/'`stones/BoxStone.cc

BoxStone.obj: stones/BoxStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BoxStone.obj -MD -MP -MF $(DEPDIR)/BoxStone.Tpo -c -o BoxStone.obj `if test -f 'stones/BoxStone.cc'; then $(CYGPATH_W) 'stones/BoxStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BoxStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/BoxStone.Tpo $(DEPDIR)/BoxStone.Po
#	$(AM_V_CXX)source='stones/BoxStone.cc' object='BoxStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BoxStone.obj `if test -f 'stones/BoxStone.cc'; then $(CYGPATH_W) 'stones/BoxStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/BoxStone.cc'; fi`

FloppySwitch.o: stones/FloppySwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FloppySwitch.o -MD -MP -MF $(DEPDIR)/FloppySwitch.Tpo -c -o FloppySwitch.o `test -f 'stones/FloppySwitch.cc' || echo '$(srcdir)/'`stones/FloppySwitch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/FloppySwitch.Tpo $(DEPDIR)/FloppySwitch.Po
#	$(AM_V_CXX)source='stones/FloppySwitch.cc' object='FloppySwitch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FloppySwitch.o `test -f 'stones/FloppySwitch.cc' || echo '$(srcdir)/'`stones/FloppySwitch.cc

FloppySwitch.obj: stones/FloppySwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FloppySwitch.obj -MD -MP -MF $(DEPDIR)/FloppySwitch.Tpo -c -o FloppySwitch.obj `if test -f 'stones/FloppySwitch.cc'; then $(CYGPATH_W) 'stones/FloppySwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FloppySwitch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/FloppySwitch.Tpo $(DEPDIR)/FloppySwitch.Po
#	$(AM_V_CXX)source='stones/FloppySwitch.cc' object='FloppySwitch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FloppySwitch.obj `if test -f 'stones/FloppySwitch.cc'; then $(CYGPATH_W) 'stones/FloppySwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FloppySwitch.cc'; fi`

FourSwitch.o: stones/FourSwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FourSwitch.o -MD -MP -MF $(DEPDIR)/FourSwitch.Tpo -c -o FourSwitch.o `test -f 'stones/FourSwitch.cc' || echo '$(srcdir)/'`stones/FourSwitch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/FourSwitch.Tpo $(DEPDIR)/FourSwitch.Po
#	$(AM_V_CXX)source='stones/FourSwitch.cc' object='FourSwitch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FourSwitch.o `test -f 'stones/FourSwitch.cc' || echo '$(srcdir)/'`stones/FourSwitch.cc

FourSwitch.obj: stones/FourSwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FourSwitch.obj -MD -MP -MF $(DEPDIR)/FourSwitch.Tpo -c -o FourSwitch.obj `if test -f 'stones/FourSwitch.cc'; then $(CYGPATH_W) 'stones/FourSwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FourSwitch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/FourSwitch.Tpo $(DEPDIR)/FourSwitch.Po
#	$(AM_V_CXX)source='stones/FourSwitch.cc' object='FourSwitch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FourSwitch.obj `if test -f 'stones/FourSwitch.cc'; then $(CYGPATH_W) 'stones/FourSwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/FourSwitch.cc'; fi`

GhostStone.o: stones/GhostStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GhostStone.o -MD -MP -MF $(DEPDIR)/GhostStone.Tpo -c -o GhostStone.o `test -f 'stones/GhostStone.cc' || echo '$(srcdir)/'`stones/GhostStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/GhostStone.Tpo $(DEPDIR)/GhostStone.Po
#	$(AM_V_CXX)source='stones/GhostStone.cc' object='GhostStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GhostStone.o `test -f 'stones/GhostStone.cc' || echo '$(srcdir)/'`stones/GhostStone.cc

GhostStone.obj: stones/GhostStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GhostStone.obj -MD -MP -MF $(DEPDIR)/GhostStone.Tpo -c -o GhostStone.obj `if test -f 'stones/GhostStone.cc'; then $(CYGPATH_W) 'stones/GhostStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GhostStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/GhostStone.Tpo $(DEPDIR)/GhostStone.Po
#	$(AM_V_CXX)source='stones/GhostStone.cc' object='GhostStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GhostStone.obj `if test -f 'stones/GhostStone.cc'; then $(CYGPATH_W) 'stones/GhostStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GhostStone.cc'; fi`

GlassStones.o: stones/GlassStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlassStones.o -MD -MP -MF $(DEPDIR)/GlassStones.Tpo -c -o GlassStones.o `test -f 'stones/GlassStones.cc' || echo '$(srcdir)/'`stones/GlassStones.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/GlassStones.Tpo $(DEPDIR)/GlassStones.Po
#	$(AM_V_CXX)source='stones/GlassStones.cc' object='GlassStones.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlassStones.o `test -f 'stones/GlassStones.cc' || echo '$(srcdir)/'`stones/GlassStones.cc

GlassStones.obj: stones/GlassStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlassStones.obj -MD -MP -MF $(DEPDIR)/GlassStones.Tpo -c -o GlassStones.obj `if test -f 'stones/GlassStones.cc'; then $(CYGPATH_W) 'stones/GlassStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GlassStones.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/GlassStones.Tpo $(DEPDIR)/GlassStones.Po
#	$(AM_V_CXX)source='stones/GlassStones.cc' object='GlassStones.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlassStones.obj `if test -f 'stones/GlassStones.cc'; then $(CYGPATH_W) 'stones/GlassStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GlassStones.cc'; fi`

GreenBrownStone.o: stones/GreenBrownStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GreenBrownStone.o -MD -MP -MF $(DEPDIR)/GreenBrownStone.Tpo -c -o GreenBrownStone.o `test -f 'stones/GreenBrownStone.cc' || echo '$(srcdir)/'`stones/GreenBrownStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/GreenBrownStone.Tpo $(DEPDIR)/GreenBrownStone.Po
#	$(AM_V_CXX)source='stones/GreenBrownStone.cc' object='GreenBrownStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GreenBrownStone.o `test -f 'stones/GreenBrownStone.cc' || echo '$(srcdir)/'`stones/GreenBrownStone.cc

GreenBrownStone.obj: stones/GreenBrownStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GreenBrownStone.obj -MD -MP -MF $(DEPDIR)/GreenBrownStone.Tpo -c -o GreenBrownStone.obj `if test -f 'stones/GreenBrownStone.cc'; then $(CYGPATH_W) 'stones/GreenBrownStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GreenBrownStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/GreenBrownStone.Tpo $(DEPDIR)/GreenBrownStone.Po
#	$(AM_V_CXX)source='stones/GreenBrownStone.cc' object='GreenBrownStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GreenBrownStone.obj `if test -f 'stones/GreenBrownStone.cc'; then $(CYGPATH_W) 'stones/GreenBrownStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/GreenBrownStone.cc'; fi`

IceBlock.o: stones/IceBlock.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT IceBlock.o -MD -MP -MF $(DEPDIR)/IceBlock.Tpo -c -o IceBlock.o `test -f 'stones/IceBlock.cc' || echo '$(srcdir)/'`stones/IceBlock.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/IceBlock.Tpo $(DEPDIR)/IceBlock.Po
#	$(AM_V_CXX)source='stones/IceBlock.cc' object='IceBlock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o IceBlock.o `test -f 'stones/IceBlock.cc' || echo '$(srcdir)/'`stones/IceBlock.cc

IceBlock.obj: stones/IceBlock.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT IceBlock.obj -MD -MP -MF $(DEPDIR)/IceBlock.Tpo -c -o IceBlock.obj `if test -f 'stones/IceBlock.cc'; then $(CYGPATH_W) 'stones/IceBlock.cc'; else $(CYGPATH_W) '$(srcdir)/stones/IceBlock.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/IceBlock.Tpo $(DEPDIR)/IceBlock.Po
#	$(AM_V_CXX)source='stones/IceBlock.cc' object='IceBlock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o IceBlock.obj `if test -f 'stones/IceBlock.cc'; then $(CYGPATH_W) 'stones/IceBlock.cc'; else $(CYGPATH_W) '$(srcdir)/stones/IceBlock.cc'; fi`

JambStone.o: stones/JambStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT JambStone.o -MD -MP -MF $(DEPDIR)/JambStone.Tpo -c -o JambStone.o `test -f 'stones/JambStone.cc' || echo '$(srcdir)/'`stones/JambStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/JambStone.Tpo $(DEPDIR)/JambStone.Po
#	$(AM_V_CXX)source='stones/JambStone.cc' object='JambStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o JambStone.o `test -f 'stones/JambStone.cc' || echo '$(srcdir)/'`stones/JambStone.cc

JambStone.obj: stones/JambStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT JambStone.obj -MD -MP -MF $(DEPDIR)/JambStone.Tpo -c -o JambStone.obj `if test -f 'stones/JambStone.cc'; then $(CYGPATH_W) 'stones/JambStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/JambStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/JambStone.Tpo $(DEPDIR)/JambStone.Po
#	$(AM_V_CXX)source='stones/JambStone.cc' object='JambStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o JambStone.obj `if test -f 'stones/JambStone.cc'; then $(CYGPATH_W) 'stones/JambStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/JambStone.cc'; fi`

KeySwitch.o: stones/KeySwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeySwitch.o -MD -MP -MF $(DEPDIR)/KeySwitch.Tpo -c -o KeySwitch.o `test -f 'stones/KeySwitch.cc' || echo '$(srcdir)/'`stones/KeySwitch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/KeySwitch.Tpo $(DEPDIR)/KeySwitch.Po
#	$(AM_V_CXX)source='stones/KeySwitch.cc' object='KeySwitch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeySwitch.o `test -f 'stones/KeySwitch.cc' || echo '$(srcdir)/'`stones/KeySwitch.cc

KeySwitch.obj: stones/KeySwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeySwitch.obj -MD -MP -MF $(DEPDIR)/KeySwitch.Tpo -c -o KeySwitch.obj `if test -f 'stones/KeySwitch.cc'; then $(CYGPATH_W) 'stones/KeySwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/KeySwitch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/KeySwitch.Tpo $(DEPDIR)/KeySwitch.Po
#	$(AM_V_CXX)source='stones/KeySwitch.cc' object='KeySwitch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeySwitch.obj `if test -f 'stones/KeySwitch.cc'; then $(CYGPATH_W) 'stones/KeySwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/KeySwitch.cc'; fi`

KnightStone.o: stones/KnightStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KnightStone.o -MD -MP -MF $(DEPDIR)/KnightStone.Tpo -c -o KnightStone.o `test -f 'stones/KnightStone.cc' || echo '$(srcdir)/'`stones/KnightStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/KnightStone.Tpo $(DEPDIR)/KnightStone.Po
#	$(AM_V_CXX)source='stones/KnightStone.cc' object='KnightStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KnightStone.o `test -f 'stones/KnightStone.cc' || echo '$(srcdir)/'`stones/KnightStone.cc

KnightStone.obj: stones/KnightStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KnightStone.obj -MD -MP -MF $(DEPDIR)/KnightStone.Tpo -c -o KnightStone.obj `if test -f 'stones/KnightStone.cc'; then $(CYGPATH_W) 'stones/KnightStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/KnightStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/KnightStone.Tpo $(DEPDIR)/KnightStone.Po
#	$(AM_V_CXX)source='stones/KnightStone.cc' object='KnightStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KnightStone.obj `if test -f 'stones/KnightStone.cc'; then $(CYGPATH_W) 'stones/KnightStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/KnightStone.cc'; fi`

LaserStone.o: stones/LaserStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LaserStone.o -MD -MP -MF $(DEPDIR)/LaserStone.Tpo -c -o LaserStone.o `test -f 'stones/LaserStone.cc' || echo '$(srcdir)/'`stones/LaserStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LaserStone.Tpo $(DEPDIR)/LaserStone.Po
#	$(AM_V_CXX)source='stones/LaserStone.cc' object='LaserStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LaserStone.o `test -f 'stones/LaserStone.cc' || echo '$(srcdir)/'`stones/LaserStone.cc

LaserStone.obj: stones/LaserStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LaserStone.obj -MD -MP -MF $(DEPDIR)/LaserStone.Tpo -c -o LaserStone.obj `if test -f 'stones/LaserStone.cc'; then $(CYGPATH_W) 'stones/LaserStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LaserStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LaserStone.Tpo $(DEPDIR)/LaserStone.Po
#	$(AM_V_CXX)source='stones/LaserStone.cc' object='LaserStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LaserStone.obj `if test -f 'stones/LaserStone.cc'; then $(CYGPATH_W) 'stones/LaserStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LaserStone.cc'; fi`

LaserSwitch.o: stones/LaserSwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LaserSwitch.o -MD -MP -MF $(DEPDIR)/LaserSwitch.Tpo -c -o LaserSwitch.o `test -f 'stones/LaserSwitch.cc' || echo '$(srcdir)/'`stones/LaserSwitch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LaserSwitch.Tpo $(DEPDIR)/LaserSwitch.Po
#	$(AM_V_CXX)source='stones/LaserSwitch.cc' object='LaserSwitch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LaserSwitch.o `test -f 'stones/LaserSwitch.cc' || echo '$(srcdir)/'`stones/LaserSwitch.cc

LaserSwitch.obj: stones/LaserSwitch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LaserSwitch.obj -MD -MP -MF $(DEPDIR)/LaserSwitch.Tpo -c -o LaserSwitch.obj `if test -f 'stones/LaserSwitch.cc'; then $(CYGPATH_W) 'stones/LaserSwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LaserSwitch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LaserSwitch.Tpo $(DEPDIR)/LaserSwitch.Po
#	$(AM_V_CXX)source='stones/LaserSwitch.cc' object='LaserSwitch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LaserSwitch.obj `if test -f 'stones/LaserSwitch.cc'; then $(CYGPATH_W) 'stones/LaserSwitch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LaserSwitch.cc'; fi`

LightPassengerStone.o: stones/LightPassengerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightPassengerStone.o -MD -MP -MF $(DEPDIR)/LightPassengerStone.Tpo -c -o LightPassengerStone.o `test -f 'stones/LightPassengerStone.cc' || echo '$(srcdir)/'`stones/LightPassengerStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/LightPassengerStone.Tpo $(DEPDIR)/LightPassengerStone.Po
#	$(AM_V_CXX)source='stones/LightPassengerStone.cc' object='LightPassengerStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightPassengerStone.o `test -f 'stones/LightPassengerStone.cc' || echo '$(srcdir)/'`stones/LightPassengerStone.cc

LightPassengerStone.obj: stones/LightPassengerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightPassengerStone.obj -MD -MP -MF $(DEPDIR)/LightPassengerStone.Tpo -c -o LightPassengerStone.obj `if test -f 'stones/LightPassengerStone.cc'; then $(CYGPATH_W) 'stones/LightPassengerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LightPassengerStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/LightPassengerStone.Tpo $(DEPDIR)/LightPassengerStone.Po
#	$(AM_V_CXX)source='stones/LightPassengerStone.cc' object='LightPassengerStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightPassengerStone.obj `if test -f 'stones/LightPassengerStone.cc'; then $(CYGPATH_W) 'stones/LightPassengerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/LightPassengerStone.cc'; fi`

MagicStone.o: stones/MagicStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MagicStone.o -MD -MP -MF $(DEPDIR)/MagicStone.Tpo -c -o MagicStone.o `test -f 'stones/MagicStone.cc' || echo '$(srcdir)/'`stones/MagicStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MagicStone.Tpo $(DEPDIR)/MagicStone.Po
#	$(AM_V_CXX)source='stones/MagicStone.cc' object='MagicStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MagicStone.o `test -f 'stones/MagicStone.cc' || echo '$(srcdir)/'`stones/MagicStone.cc

MagicStone.obj: stones/MagicStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MagicStone.obj -MD -MP -MF $(DEPDIR)/MagicStone.Tpo -c -o MagicStone.obj `if test -f 'stones/MagicStone.cc'; then $(CYGPATH_W) 'stones/MagicStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MagicStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MagicStone.Tpo $(DEPDIR)/MagicStone.Po
#	$(AM_V_CXX)source='stones/MagicStone.cc' object='MagicStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MagicStone.obj `if test -f 'stones/MagicStone.cc'; then $(CYGPATH_W) 'stones/MagicStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MagicStone.cc'; fi`

MailStone.o: stones/MailStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MailStone.o -MD -MP -MF $(DEPDIR)/MailStone.Tpo -c -o MailStone.o `test -f 'stones/MailStone.cc' || echo '$(srcdir)/'`stones/MailStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MailStone.Tpo $(DEPDIR)/MailStone.Po
#	$(AM_V_CXX)source='stones/MailStone.cc' object='MailStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MailStone.o `test -f 'stones/MailStone.cc' || echo '$(srcdir)/'`stones/MailStone.cc

MailStone.obj: stones/MailStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MailStone.obj -MD -MP -MF $(DEPDIR)/MailStone.Tpo -c -o MailStone.obj `if test -f 'stones/MailStone.cc'; then $(CYGPATH_W) 'stones/MailStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MailStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MailStone.Tpo $(DEPDIR)/MailStone.Po
#	$(AM_V_CXX)source='stones/MailStone.cc' object='MailStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MailStone.obj `if test -f 'stones/MailStone.cc'; then $(CYGPATH_W) 'stones/MailStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MailStone.cc'; fi`

MirrorStone.o: stones/MirrorStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MirrorStone.o -MD -MP -MF $(DEPDIR)/MirrorStone.Tpo -c -o MirrorStone.o `test -f 'stones/MirrorStone.cc' || echo '$(srcdir)/'`stones/MirrorStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MirrorStone.Tpo $(DEPDIR)/MirrorStone.Po
#	$(AM_V_CXX)source='stones/MirrorStone.cc' object='MirrorStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MirrorStone.o `test -f 'stones/MirrorStone.cc' || echo '$(srcdir)/'`stones/MirrorStone.cc

MirrorStone.obj: stones/MirrorStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MirrorStone.obj -MD -MP -MF $(DEPDIR)/MirrorStone.Tpo -c -o MirrorStone.obj `if test -f 'stones/MirrorStone.cc'; then $(CYGPATH_W) 'stones/MirrorStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MirrorStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MirrorStone.Tpo $(DEPDIR)/MirrorStone.Po
#	$(AM_V_CXX)source='stones/MirrorStone.cc' object='MirrorStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MirrorStone.obj `if test -f 'stones/MirrorStone.cc'; then $(CYGPATH_W) 'stones/MirrorStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MirrorStone.cc'; fi`

MonoFlopStone.o: stones/MonoFlopStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MonoFlopStone.o -MD -MP -MF $(DEPDIR)/MonoFlopStone.Tpo -c -o MonoFlopStone.o `test -f 'stones/MonoFlopStone.cc' || echo '$(srcdir)/'`stones/MonoFlopStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/MonoFlopStone.Tpo $(DEPDIR)/MonoFlopStone.Po
#	$(AM_V_CXX)source='stones/MonoFlopStone.cc' object='MonoFlopStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MonoFlopStone.o `test -f 'stones/MonoFlopStone.cc' || echo '$(srcdir)/'`stones/MonoFlopStone.cc

MonoFlopStone.obj: stones/MonoFlopStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MonoFlopStone.obj -MD -MP -MF $(DEPDIR)/MonoFlopStone.Tpo -c -o MonoFlopStone.obj `if test -f 'stones/MonoFlopStone.cc'; then $(CYGPATH_W) 'stones/MonoFlopStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MonoFlopStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/MonoFlopStone.Tpo $(DEPDIR)/MonoFlopStone.Po
#	$(AM_V_CXX)source='stones/MonoFlopStone.cc' object='MonoFlopStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MonoFlopStone.obj `if test -f 'stones/MonoFlopStone.cc'; then $(CYGPATH_W) 'stones/MonoFlopStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/MonoFlopStone.cc'; fi`

OneWayStone.o: stones/OneWayStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OneWayStone.o -MD -MP -MF $(DEPDIR)/OneWayStone.Tpo -c -o OneWayStone.o `test -f 'stones/OneWayStone.cc' || echo '$(srcdir)/'`stones/OneWayStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/OneWayStone.Tpo $(DEPDIR)/OneWayStone.Po
#	$(AM_V_CXX)source='stones/OneWayStone.cc' object='OneWayStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OneWayStone.o `test -f 'stones/OneWayStone.cc' || echo '$(srcdir)/'`stones/OneWayStone.cc

OneWayStone.obj: stones/OneWayStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OneWayStone.obj -MD -MP -MF $(DEPDIR)/OneWayStone.Tpo -c -o OneWayStone.obj `if test -f 'stones/OneWayStone.cc'; then $(CYGPATH_W) 'stones/OneWayStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/OneWayStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/OneWayStone.Tpo $(DEPDIR)/OneWayStone.Po
#	$(AM_V_CXX)source='stones/OneWayStone.cc' object='OneWayStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OneWayStone.obj `if test -f 'stones/OneWayStone.cc'; then $(CYGPATH_W) 'stones/OneWayStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/OneWayStone.cc'; fi`

OxydStone.o: stones/OxydStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OxydStone.o -MD -MP -MF $(DEPDIR)/OxydStone.Tpo -c -o OxydStone.o `test -f 'stones/OxydStone.cc' || echo '$(srcdir)/'`stones/OxydStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/OxydStone.Tpo $(DEPDIR)/OxydStone.Po
#	$(AM_V_CXX)source='stones/OxydStone.cc' object='OxydStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OxydStone.o `test -f 'stones/OxydStone.cc' || echo '$(srcdir)/'`stones/OxydStone.cc

OxydStone.obj: stones/OxydStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OxydStone.obj -MD -MP -MF $(DEPDIR)/OxydStone.Tpo -c -o OxydStone.obj `if test -f 'stones/OxydStone.cc'; then $(CYGPATH_W) 'stones/OxydStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/OxydStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/OxydStone.Tpo $(DEPDIR)/OxydStone.Po
#	$(AM_V_CXX)source='stones/OxydStone.cc' object='OxydStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OxydStone.obj `if test -f 'stones/OxydStone.cc'; then $(CYGPATH_W) 'stones/OxydStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/OxydStone.cc'; fi`

PassageStone.o: stones/PassageStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PassageStone.o -MD -MP -MF $(DEPDIR)/PassageStone.Tpo -c -o PassageStone.o `test -f 'stones/PassageStone.cc' || echo '$(srcdir)/'`stones/PassageStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PassageStone.Tpo $(DEPDIR)/PassageStone.Po
#	$(AM_V_CXX)source='stones/PassageStone.cc' object='PassageStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PassageStone.o `test -f 'stones/PassageStone.cc' || echo '$(srcdir)/'`stones/PassageStone.cc

PassageStone.obj: stones/PassageStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PassageStone.obj -MD -MP -MF $(DEPDIR)/PassageStone.Tpo -c -o PassageStone.obj `if test -f 'stones/PassageStone.cc'; then $(CYGPATH_W) 'stones/PassageStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PassageStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PassageStone.Tpo $(DEPDIR)/PassageStone.Po
#	$(AM_V_CXX)source='stones/PassageStone.cc' object='PassageStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PassageStone.obj `if test -f 'stones/PassageStone.cc'; then $(CYGPATH_W) 'stones/PassageStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PassageStone.cc'; fi`

PlasterStone.o: stones/PlasterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlasterStone.o -MD -MP -MF $(DEPDIR)/PlasterStone.Tpo -c -o PlasterStone.o `test -f 'stones/PlasterStone.cc' || echo '$(srcdir)/'`stones/PlasterStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PlasterStone.Tpo $(DEPDIR)/PlasterStone.Po
#	$(AM_V_CXX)source='stones/PlasterStone.cc' object='PlasterStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlasterStone.o `test -f 'stones/PlasterStone.cc' || echo '$(srcdir)/'`stones/PlasterStone.cc

PlasterStone.obj: stones/PlasterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlasterStone.obj -MD -MP -MF $(DEPDIR)/PlasterStone.Tpo -c -o PlasterStone.obj `if test -f 'stones/PlasterStone.cc'; then $(CYGPATH_W) 'stones/PlasterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PlasterStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PlasterStone.Tpo $(DEPDIR)/PlasterStone.Po
#	$(AM_V_CXX)source='stones/PlasterStone.cc' object='PlasterStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlasterStone.obj `if test -f 'stones/PlasterStone.cc'; then $(CYGPATH_W) 'stones/PlasterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PlasterStone.cc'; fi`

PolarSwitchStone.o: stones/PolarSwitchStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PolarSwitchStone.o -MD -MP -MF $(DEPDIR)/PolarSwitchStone.Tpo -c -o PolarSwitchStone.o `test -f 'stones/PolarSwitchStone.cc' || echo '$(srcdir)/'`stones/PolarSwitchStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PolarSwitchStone.Tpo $(DEPDIR)/PolarSwitchStone.Po
#	$(AM_V_CXX)source='stones/PolarSwitchStone.cc' object='PolarSwitchStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PolarSwitchStone.o `test -f 'stones/PolarSwitchStone.cc' || echo '$(srcdir)/'`stones/PolarSwitchStone.cc

PolarSwitchStone.obj: stones/PolarSwitchStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PolarSwitchStone.obj -MD -MP -MF $(DEPDIR)/PolarSwitchStone.Tpo -c -o PolarSwitchStone.obj `if test -f 'stones/PolarSwitchStone.cc'; then $(CYGPATH_W) 'stones/PolarSwitchStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PolarSwitchStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PolarSwitchStone.Tpo $(DEPDIR)/PolarSwitchStone.Po
#	$(AM_V_CXX)source='stones/PolarSwitchStone.cc' object='PolarSwitchStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PolarSwitchStone.obj `if test -f 'stones/PolarSwitchStone.cc'; then $(CYGPATH_W) 'stones/PolarSwitchStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PolarSwitchStone.cc'; fi`

PortalStone.o: stones/PortalStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PortalStone.o -MD -MP -MF $(DEPDIR)/PortalStone.Tpo -c -o PortalStone.o `test -f 'stones/PortalStone.cc' || echo '$(srcdir)/'`stones/PortalStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PortalStone.Tpo $(DEPDIR)/PortalStone.Po
#	$(AM_V_CXX)source='stones/PortalStone.cc' object='PortalStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PortalStone.o `test -f 'stones/PortalStone.cc' || echo '$(srcdir)/'`stones/PortalStone.cc

PortalStone.obj: stones/PortalStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PortalStone.obj -MD -MP -MF $(DEPDIR)/PortalStone.Tpo -c -o PortalStone.obj `if test -f 'stones/PortalStone.cc'; then $(CYGPATH_W) 'stones/PortalStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PortalStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PortalStone.Tpo $(DEPDIR)/PortalStone.Po
#	$(AM_V_CXX)source='stones/PortalStone.cc' object='PortalStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PortalStone.obj `if test -f 'stones/PortalStone.cc'; then $(CYGPATH_W) 'stones/PortalStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PortalStone.cc'; fi`

PullStone.o: stones/PullStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PullStone.o -MD -MP -MF $(DEPDIR)/PullStone.Tpo -c -o PullStone.o `test -f 'stones/PullStone.cc' || echo '$(srcdir)/'`stones/PullStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PullStone.Tpo $(DEPDIR)/PullStone.Po
#	$(AM_V_CXX)source='stones/PullStone.cc' object='PullStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PullStone.o `test -f 'stones/PullStone.cc' || echo '$(srcdir)/'`stones/PullStone.cc

PullStone.obj: stones/PullStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PullStone.obj -MD -MP -MF $(DEPDIR)/PullStone.Tpo -c -o PullStone.obj `if test -f 'stones/PullStone.cc'; then $(CYGPATH_W) 'stones/PullStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PullStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PullStone.Tpo $(DEPDIR)/PullStone.Po
#	$(AM_V_CXX)source='stones/PullStone.cc' object='PullStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PullStone.obj `if test -f 'stones/PullStone.cc'; then $(CYGPATH_W) 'stones/PullStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PullStone.cc'; fi`

PuzzleStone.o: stones/PuzzleStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PuzzleStone.o -MD -MP -MF $(DEPDIR)/PuzzleStone.Tpo -c -o PuzzleStone.o `test -f 'stones/PuzzleStone.cc' || echo '$(srcdir)/'`stones/PuzzleStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/PuzzleStone.Tpo $(DEPDIR)/PuzzleStone.Po
#	$(AM_V_CXX)source='stones/PuzzleStone.cc' object='PuzzleStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PuzzleStone.o `test -f 'stones/PuzzleStone.cc' || echo '$(srcdir)/'`stones/PuzzleStone.cc

PuzzleStone.obj: stones/PuzzleStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PuzzleStone.obj -MD -MP -MF $(DEPDIR)/PuzzleStone.Tpo -c -o PuzzleStone.obj `if test -f 'stones/PuzzleStone.cc'; then $(CYGPATH_W) 'stones/PuzzleStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PuzzleStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/PuzzleStone.Tpo $(DEPDIR)/PuzzleStone.Po
#	$(AM_V_CXX)source='stones/PuzzleStone.cc' object='PuzzleStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PuzzleStone.obj `if test -f 'stones/PuzzleStone.cc'; then $(CYGPATH_W) 'stones/PuzzleStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/PuzzleStone.cc'; fi`

QuakeStone.o: stones/QuakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT QuakeStone.o -MD -MP -MF $(DEPDIR)/QuakeStone.Tpo -c -o QuakeStone.o `test -f 'stones/QuakeStone.cc' || echo '$(srcdir)/'`stones/QuakeStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/QuakeStone.Tpo $(DEPDIR)/QuakeStone.Po
#	$(AM_V_CXX)source='stones/QuakeStone.cc' object='QuakeStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o QuakeStone.o `test -f 'stones/QuakeStone.cc' || echo '$(srcdir)/'`stones/QuakeStone.cc

QuakeStone.obj: stones/QuakeStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT QuakeStone.obj -MD -MP -MF $(DEPDIR)/QuakeStone.Tpo -c -o QuakeStone.obj `if test -f 'stones/QuakeStone.cc'; then $(CYGPATH_W) 'stones/QuakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/QuakeStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/QuakeStone.Tpo $(DEPDIR)/QuakeStone.Po
#	$(AM_V_CXX)source='stones/QuakeStone.cc' object='QuakeStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o QuakeStone.obj `if test -f 'stones/QuakeStone.cc'; then $(CYGPATH_W) 'stones/QuakeStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/QuakeStone.cc'; fi`

RotatorStone.o: stones/RotatorStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RotatorStone.o -MD -MP -MF $(DEPDIR)/RotatorStone.Tpo -c -o RotatorStone.o `test -f 'stones/RotatorStone.cc' || echo '$(srcdir)/'`stones/RotatorStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/RotatorStone.Tpo $(DEPDIR)/RotatorStone.Po
#	$(AM_V_CXX)source='stones/RotatorStone.cc' object='RotatorStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RotatorStone.o `test -f 'stones/RotatorStone.cc' || echo '$(srcdir)/'`stones/RotatorStone.cc

RotatorStone.obj: stones/RotatorStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RotatorStone.obj -MD -MP -MF $(DEPDIR)/RotatorStone.Tpo -c -o RotatorStone.obj `if test -f 'stones/RotatorStone.cc'; then $(CYGPATH_W) 'stones/RotatorStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/RotatorStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/RotatorStone.Tpo $(DEPDIR)/RotatorStone.Po
#	$(AM_V_CXX)source='stones/RotatorStone.cc' object='RotatorStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RotatorStone.obj `if test -f 'stones/RotatorStone.cc'; then $(CYGPATH_W) 'stones/RotatorStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/RotatorStone.cc'; fi`

RubberbandStone.o: stones/RubberbandStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RubberbandStone.o -MD -MP -MF $(DEPDIR)/RubberbandStone.Tpo -c -o RubberbandStone.o `test -f 'stones/RubberbandStone.cc' || echo '$(srcdir)/'`stones/RubberbandStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/RubberbandStone.Tpo $(DEPDIR)/RubberbandStone.Po
#	$(AM_V_CXX)source='stones/RubberbandStone.cc' object='RubberbandStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RubberbandStone.o `test -f 'stones/RubberbandStone.cc' || echo '$(srcdir)/'`stones/RubberbandStone.cc

RubberbandStone.obj: stones/RubberbandStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RubberbandStone.obj -MD -MP -MF $(DEPDIR)/RubberbandStone.Tpo -c -o RubberbandStone.obj `if test -f 'stones/RubberbandStone.cc'; then $(CYGPATH_W) 'stones/RubberbandStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/RubberbandStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/RubberbandStone.Tpo $(DEPDIR)/RubberbandStone.Po
#	$(AM_V_CXX)source='stones/RubberbandStone.cc' object='RubberbandStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RubberbandStone.obj `if test -f 'stones/RubberbandStone.cc'; then $(CYGPATH_W) 'stones/RubberbandStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/RubberbandStone.cc'; fi`

ScissorsStone.o: stones/ScissorsStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScissorsStone.o -MD -MP -MF $(DEPDIR)/ScissorsStone.Tpo -c -o ScissorsStone.o `test -f 'stones/ScissorsStone.cc' || echo '$(srcdir)/'`stones/ScissorsStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScissorsStone.Tpo $(DEPDIR)/ScissorsStone.Po
#	$(AM_V_CXX)source='stones/ScissorsStone.cc' object='ScissorsStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScissorsStone.o `test -f 'stones/ScissorsStone.cc' || echo '$(srcdir)/'`stones/ScissorsStone.cc

ScissorsStone.obj: stones/ScissorsStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScissorsStone.obj -MD -MP -MF $(DEPDIR)/ScissorsStone.Tpo -c -o ScissorsStone.obj `if test -f 'stones/ScissorsStone.cc'; then $(CYGPATH_W) 'stones/ScissorsStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ScissorsStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ScissorsStone.Tpo $(DEPDIR)/ScissorsStone.Po
#	$(AM_V_CXX)source='stones/ScissorsStone.cc' object='ScissorsStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScissorsStone.obj `if test -f 'stones/ScissorsStone.cc'; then $(CYGPATH_W) 'stones/ScissorsStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ScissorsStone.cc'; fi`

ShogunStone.o: stones/ShogunStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShogunStone.o -MD -MP -MF $(DEPDIR)/ShogunStone.Tpo -c -o ShogunStone.o `test -f 'stones/ShogunStone.cc' || echo '$(srcdir)/'`stones/ShogunStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ShogunStone.Tpo $(DEPDIR)/ShogunStone.Po
#	$(AM_V_CXX)source='stones/ShogunStone.cc' object='ShogunStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShogunStone.o `test -f 'stones/ShogunStone.cc' || echo '$(srcdir)/'`stones/ShogunStone.cc

ShogunStone.obj: stones/ShogunStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShogunStone.obj -MD -MP -MF $(DEPDIR)/ShogunStone.Tpo -c -o ShogunStone.obj `if test -f 'stones/ShogunStone.cc'; then $(CYGPATH_W) 'stones/ShogunStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ShogunStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ShogunStone.Tpo $(DEPDIR)/ShogunStone.Po
#	$(AM_V_CXX)source='stones/ShogunStone.cc' object='ShogunStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShogunStone.obj `if test -f 'stones/ShogunStone.cc'; then $(CYGPATH_W) 'stones/ShogunStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ShogunStone.cc'; fi`

SimpleStones.o: stones/SimpleStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleStones.o -MD -MP -MF $(DEPDIR)/SimpleStones.Tpo -c -o SimpleStones.o `test -f 'stones/SimpleStones.cc' || echo '$(srcdir)/'`stones/SimpleStones.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleStones.Tpo $(DEPDIR)/SimpleStones.Po
#	$(AM_V_CXX)source='stones/SimpleStones.cc' object='SimpleStones.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleStones.o `test -f 'stones/SimpleStones.cc' || echo '$(srcdir)/'`stones/SimpleStones.cc

SimpleStones.obj: stones/SimpleStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleStones.obj -MD -MP -MF $(DEPDIR)/SimpleStones.Tpo -c -o SimpleStones.obj `if test -f 'stones/SimpleStones.cc'; then $(CYGPATH_W) 'stones/SimpleStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SimpleStones.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SimpleStones.Tpo $(DEPDIR)/SimpleStones.Po
#	$(AM_V_CXX)source='stones/SimpleStones.cc' object='SimpleStones.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleStones.obj `if test -f 'stones/SimpleStones.cc'; then $(CYGPATH_W) 'stones/SimpleStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SimpleStones.cc'; fi`

SpitterStone.o: stones/SpitterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpitterStone.o -MD -MP -MF $(DEPDIR)/SpitterStone.Tpo -c -o SpitterStone.o `test -f 'stones/SpitterStone.cc' || echo '$(srcdir)/'`stones/SpitterStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SpitterStone.Tpo $(DEPDIR)/SpitterStone.Po
#	$(AM_V_CXX)source='stones/SpitterStone.cc' object='SpitterStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpitterStone.o `test -f 'stones/SpitterStone.cc' || echo '$(srcdir)/'`stones/SpitterStone.cc

SpitterStone.obj: stones/SpitterStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpitterStone.obj -MD -MP -MF $(DEPDIR)/SpitterStone.Tpo -c -o SpitterStone.obj `if test -f 'stones/SpitterStone.cc'; then $(CYGPATH_W) 'stones/SpitterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SpitterStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SpitterStone.Tpo $(DEPDIR)/SpitterStone.Po
#	$(AM_V_CXX)source='stones/SpitterStone.cc' object='SpitterStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpitterStone.obj `if test -f 'stones/SpitterStone.cc'; then $(CYGPATH_W) 'stones/SpitterStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SpitterStone.cc'; fi`

StandardStones.o: stones/StandardStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandardStones.o -MD -MP -MF $(DEPDIR)/StandardStones.Tpo -c -o StandardStones.o `test -f 'stones/StandardStones.cc' || echo '$(srcdir)/'`stones/StandardStones.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/StandardStones.Tpo $(DEPDIR)/StandardStones.Po
#	$(AM_V_CXX)source='stones/StandardStones.cc' object='StandardStones.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandardStones.o `test -f 'stones/StandardStones.cc' || echo '$(srcdir)/'`stones/StandardStones.cc

StandardStones.obj: stones/StandardStones.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandardStones.obj -MD -MP -MF $(DEPDIR)/StandardStones.Tpo -c -o StandardStones.obj `if test -f 'stones/StandardStones.cc'; then $(CYGPATH_W) 'stones/StandardStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/StandardStones.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/StandardStones.Tpo $(DEPDIR)/StandardStones.Po
#	$(AM_V_CXX)source='stones/StandardStones.cc' object='StandardStones.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandardStones.obj `if test -f 'stones/StandardStones.cc'; then $(CYGPATH_W) 'stones/StandardStones.cc'; else $(CYGPATH_W) '$(srcdir)/stones/StandardStones.cc'; fi`

StoneImpulse.o: stones/StoneImpulse.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StoneImpulse.o -MD -MP -MF $(DEPDIR)/StoneImpulse.Tpo -c -o StoneImpulse.o `test -f 'stones/StoneImpulse.cc' || echo '$(srcdir)/'`stones/StoneImpulse.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/StoneImpulse.Tpo $(DEPDIR)/StoneImpulse.Po
#	$(AM_V_CXX)source='stones/StoneImpulse.cc' object='StoneImpulse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StoneImpulse.o `test -f 'stones/StoneImpulse.cc' || echo '$(srcdir)/'`stones/StoneImpulse.cc

StoneImpulse.obj: stones/StoneImpulse.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StoneImpulse.obj -MD -MP -MF $(DEPDIR)/StoneImpulse.Tpo -c -o StoneImpulse.obj `if test -f 'stones/StoneImpulse.cc'; then $(CYGPATH_W) 'stones/StoneImpulse.cc'; else $(CYGPATH_W) '$(srcdir)/stones/StoneImpulse.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/StoneImpulse.Tpo $(DEPDIR)/StoneImpulse.Po
#	$(AM_V_CXX)source='stones/StoneImpulse.cc' object='StoneImpulse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StoneImpulse.obj `if test -f 'stones/StoneImpulse.cc'; then $(CYGPATH_W) 'stones/StoneImpulse.cc'; else $(CYGPATH_W) '$(srcdir)/stones/StoneImpulse.cc'; fi`

SurpriseStone.o: stones/SurpriseStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SurpriseStone.o -MD -MP -MF $(DEPDIR)/SurpriseStone.Tpo -c -o SurpriseStone.o `test -f 'stones/SurpriseStone.cc' || echo '$(srcdir)/'`stones/SurpriseStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SurpriseStone.Tpo $(DEPDIR)/SurpriseStone.Po
#	$(AM_V_CXX)source='stones/SurpriseStone.cc' object='SurpriseStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SurpriseStone.o `test -f 'stones/SurpriseStone.cc' || echo '$(srcdir)/'`stones/SurpriseStone.cc

SurpriseStone.obj: stones/SurpriseStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SurpriseStone.obj -MD -MP -MF $(DEPDIR)/SurpriseStone.Tpo -c -o SurpriseStone.obj `if test -f 'stones/SurpriseStone.cc'; then $(CYGPATH_W) 'stones/SurpriseStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SurpriseStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SurpriseStone.Tpo $(DEPDIR)/SurpriseStone.Po
#	$(AM_V_CXX)source='stones/SurpriseStone.cc' object='SurpriseStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SurpriseStone.obj `if test -f 'stones/SurpriseStone.cc'; then $(CYGPATH_W) 'stones/SurpriseStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SurpriseStone.cc'; fi`

SwapStone.o: stones/SwapStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwapStone.o -MD -MP -MF $(DEPDIR)/SwapStone.Tpo -c -o SwapStone.o `test -f 'stones/SwapStone.cc' || echo '$(srcdir)/'`stones/SwapStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/SwapStone.Tpo $(DEPDIR)/SwapStone.Po
#	$(AM_V_CXX)source='stones/SwapStone.cc' object='SwapStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwapStone.o `test -f 'stones/SwapStone.cc' || echo '$(srcdir)/'`stones/SwapStone.cc

SwapStone.obj: stones/SwapStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwapStone.obj -MD -MP -MF $(DEPDIR)/SwapStone.Tpo -c -o SwapStone.obj `if test -f 'stones/SwapStone.cc'; then $(CYGPATH_W) 'stones/SwapStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SwapStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/SwapStone.Tpo $(DEPDIR)/SwapStone.Po
#	$(AM_V_CXX)source='stones/SwapStone.cc' object='SwapStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwapStone.obj `if test -f 'stones/SwapStone.cc'; then $(CYGPATH_W) 'stones/SwapStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/SwapStone.cc'; fi`

Switch.o: stones/Switch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Switch.o -MD -MP -MF $(DEPDIR)/Switch.Tpo -c -o Switch.o `test -f 'stones/Switch.cc' || echo '$(srcdir)/'`stones/Switch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Switch.Tpo $(DEPDIR)/Switch.Po
#	$(AM_V_CXX)source='stones/Switch.cc' object='Switch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Switch.o `test -f 'stones/Switch.cc' || echo '$(srcdir)/'`stones/Switch.cc

Switch.obj: stones/Switch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Switch.obj -MD -MP -MF $(DEPDIR)/Switch.Tpo -c -o Switch.obj `if test -f 'stones/Switch.cc'; then $(CYGPATH_W) 'stones/Switch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Switch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Switch.Tpo $(DEPDIR)/Switch.Po
#	$(AM_V_CXX)source='stones/Switch.cc' object='Switch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Switch.obj `if test -f 'stones/Switch.cc'; then $(CYGPATH_W) 'stones/Switch.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Switch.cc'; fi`

ThiefStone.o: stones/ThiefStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ThiefStone.o -MD -MP -MF $(DEPDIR)/ThiefStone.Tpo -c -o ThiefStone.o `test -f 'stones/ThiefStone.cc' || echo '$(srcdir)/'`stones/ThiefStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ThiefStone.Tpo $(DEPDIR)/ThiefStone.Po
#	$(AM_V_CXX)source='stones/ThiefStone.cc' object='ThiefStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ThiefStone.o `test -f 'stones/ThiefStone.cc' || echo '$(srcdir)/'`stones/ThiefStone.cc

ThiefStone.obj: stones/ThiefStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ThiefStone.obj -MD -MP -MF $(DEPDIR)/ThiefStone.Tpo -c -o ThiefStone.obj `if test -f 'stones/ThiefStone.cc'; then $(CYGPATH_W) 'stones/ThiefStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ThiefStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ThiefStone.Tpo $(DEPDIR)/ThiefStone.Po
#	$(AM_V_CXX)source='stones/ThiefStone.cc' object='ThiefStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ThiefStone.obj `if test -f 'stones/ThiefStone.cc'; then $(CYGPATH_W) 'stones/ThiefStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/ThiefStone.cc'; fi`

TimerStone.o: stones/TimerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimerStone.o -MD -MP -MF $(DEPDIR)/TimerStone.Tpo -c -o TimerStone.o `test -f 'stones/TimerStone.cc' || echo '$(srcdir)/'`stones/TimerStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/TimerStone.Tpo $(DEPDIR)/TimerStone.Po
#	$(AM_V_CXX)source='stones/TimerStone.cc' object='TimerStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimerStone.o `test -f 'stones/TimerStone.cc' || echo '$(srcdir)/'`stones/TimerStone.cc

TimerStone.obj: stones/TimerStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimerStone.obj -MD -MP -MF $(DEPDIR)/TimerStone.Tpo -c -o TimerStone.obj `if test -f 'stones/TimerStone.cc'; then $(CYGPATH_W) 'stones/TimerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/TimerStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/TimerStone.Tpo $(DEPDIR)/TimerStone.Po
#	$(AM_V_CXX)source='stones/TimerStone.cc' object='TimerStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimerStone.obj `if test -f 'stones/TimerStone.cc'; then $(CYGPATH_W) 'stones/TimerStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/TimerStone.cc'; fi`

Turnstile.o: stones/Turnstile.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Turnstile.o -MD -MP -MF $(DEPDIR)/Turnstile.Tpo -c -o Turnstile.o `test -f 'stones/Turnstile.cc' || echo '$(srcdir)/'`stones/Turnstile.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Turnstile.Tpo $(DEPDIR)/Turnstile.Po
#	$(AM_V_CXX)source='stones/Turnstile.cc' object='Turnstile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Turnstile.o `test -f 'stones/Turnstile.cc' || echo '$(srcdir)/'`stones/Turnstile.cc

Turnstile.obj: stones/Turnstile.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Turnstile.obj -MD -MP -MF $(DEPDIR)/Turnstile.Tpo -c -o Turnstile.obj `if test -f 'stones/Turnstile.cc'; then $(CYGPATH_W) 'stones/Turnstile.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Turnstile.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Turnstile.Tpo $(DEPDIR)/Turnstile.Po
#	$(AM_V_CXX)source='stones/Turnstile.cc' object='Turnstile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Turnstile.obj `if test -f 'stones/Turnstile.cc'; then $(CYGPATH_W) 'stones/Turnstile.cc'; else $(CYGPATH_W) '$(srcdir)/stones/Turnstile.cc'; fi`

VolcanoStone.o: stones/VolcanoStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VolcanoStone.o -MD -MP -MF $(DEPDIR)/VolcanoStone.Tpo -c -o VolcanoStone.o `test -f 'stones/VolcanoStone.cc' || echo '$(srcdir)/'`stones/VolcanoStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/VolcanoStone.Tpo $(DEPDIR)/VolcanoStone.Po
#	$(AM_V_CXX)source='stones/VolcanoStone.cc' object='VolcanoStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VolcanoStone.o `test -f 'stones/VolcanoStone.cc' || echo '$(srcdir)/'`stones/VolcanoStone.cc

VolcanoStone.obj: stones/VolcanoStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VolcanoStone.obj -MD -MP -MF $(DEPDIR)/VolcanoStone.Tpo -c -o VolcanoStone.obj `if test -f 'stones/VolcanoStone.cc'; then $(CYGPATH_W) 'stones/VolcanoStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/VolcanoStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/VolcanoStone.Tpo $(DEPDIR)/VolcanoStone.Po
#	$(AM_V_CXX)source='stones/VolcanoStone.cc' object='VolcanoStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VolcanoStone.obj `if test -f 'stones/VolcanoStone.cc'; then $(CYGPATH_W) 'stones/VolcanoStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/VolcanoStone.cc'; fi`

WindowStone.o: stones/WindowStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WindowStone.o -MD -MP -MF $(DEPDIR)/WindowStone.Tpo -c -o WindowStone.o `test -f 'stones/WindowStone.cc' || echo '$(srcdir)/'`stones/WindowStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/WindowStone.Tpo $(DEPDIR)/WindowStone.Po
#	$(AM_V_CXX)source='stones/WindowStone.cc' object='WindowStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WindowStone.o `test -f 'stones/WindowStone.cc' || echo '$(srcdir)/'`stones/WindowStone.cc

WindowStone.obj: stones/WindowStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WindowStone.obj -MD -MP -MF $(DEPDIR)/WindowStone.Tpo -c -o WindowStone.obj `if test -f 'stones/WindowStone.cc'; then $(CYGPATH_W) 'stones/WindowStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/WindowStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/WindowStone.Tpo $(DEPDIR)/WindowStone.Po
#	$(AM_V_CXX)source='stones/WindowStone.cc' object='WindowStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WindowStone.obj `if test -f 'stones/WindowStone.cc'; then $(CYGPATH_W) 'stones/WindowStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/WindowStone.cc'; fi`

YieldingStone.o: stones/YieldingStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT YieldingStone.o -MD -MP -MF $(DEPDIR)/YieldingStone.Tpo -c -o YieldingStone.o `test -f 'stones/YieldingStone.cc' || echo '$(srcdir)/'`stones/YieldingStone.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/YieldingStone.Tpo $(DEPDIR)/YieldingStone.Po
#	$(AM_V_CXX)source='stones/YieldingStone.cc' object='YieldingStone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o YieldingStone.o `test -f 'stones/YieldingStone.cc' || echo '$(srcdir)/'`stones/YieldingStone.cc

YieldingStone.obj: stones/YieldingStone.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT YieldingStone.obj -MD -MP -MF $(DEPDIR)/YieldingStone.Tpo -c -o YieldingStone.obj `if test -f 'stones/YieldingStone.cc'; then $(CYGPATH_W) 'stones/YieldingStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/YieldingStone.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/YieldingStone.Tpo $(DEPDIR)/YieldingStone.Po
#	$(AM_V_CXX)source='stones/YieldingStone.cc' object='YieldingStone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o YieldingStone.obj `if test -f 'stones/YieldingStone.cc'; then $(CYGPATH_W) 'stones/YieldingStone.cc'; else $(CYGPATH_W) '$(srcdir)/stones/YieldingStone.cc'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile

#  # mingw_ldadd := enigma_ico.o -lws2_32
#  enigma_ico.o: enigma.rc enigma.ico
#	$(WINDRES) $(srcdir)/enigma.rc --include-dir=$(srcdir) -O coff -o enigma_ico.o
.PHONY: tolua
tolua:
	@if [ "x${TOLUA}" != "x" ]; then \
		echo "Running ${TOLUA}..."; \
		${TOLUA} -H lua-display.hh -n display -o lua-display.cc display-lua.pkg; \
		${TOLUA} -H lua-enigma.hh -n enigma -o lua-enigma.cc enigma-lua.pkg; \
		${TOLUA} -H lua-global.hh -n global -o lua-global.cc global-lua.pkg; \
		${TOLUA} -H lua-ecl.hh -n px -o lua-ecl.cc ecl-lua.pkg; \
	else \
		echo "$<:0: Warning: Can't update lua interface - tolua not installed "; \
	fi
# Special target to copy all needed game files to Enigma.app/Contents/Resources.
# For Mac OS X bundle.
.PHONY: bundle
bundle:
	-rm -rf $(bundle_root)
	mkdir -p $(bundle_name)/Contents/MacOS
	mkdir -p $(bundle_name)/Contents/Resources/data/
	echo "APPL????" > $(bundle_name)/Contents/PkgInfo
	cp $(top_builddir)/etc/Info.plist $(bundle_name)/Contents/
	cp $(top_builddir)/etc/enigma.icns $(bundle_name)/Contents/Resources/
	tar --exclude .svn -c -f - -C $(top_builddir)/data levels | tar xpf - -C $(bundle_name)/Contents/Resources/data
	cp $(top_builddir)/data/*.lua $(bundle_name)/Contents/Resources/data/
	cp $(top_builddir)/data/*.xml $(bundle_name)/Contents/Resources/data/
	mkdir -p $(bundle_name)/Contents/Resources/data/gfx
	cp $(top_builddir)/data/gfx/*.png $(bundle_name)/Contents/Resources/data/gfx
	mkdir -p $(bundle_name)/Contents/Resources/data/gfx/flags25x15
	cp $(top_builddir)/data/gfx/flags25x15/*.png $(bundle_name)/Contents/Resources/data/gfx/flags25x15
	mkdir -p $(bundle_name)/Contents/Resources/data/gfx32
	cp $(top_builddir)/data/gfx32/*.png $(bundle_name)/Contents/Resources/data/gfx32
	cp $(top_builddir)/data/gfx32/*.jpg $(bundle_name)/Contents/Resources/data/gfx32
	mkdir -p $(bundle_name)/Contents/Resources/data/gfx40
	cp $(top_builddir)/data/gfx40/*.png $(bundle_name)/Contents/Resources/data/gfx40
	cp $(top_builddir)/data/gfx40/*.jpg $(bundle_name)/Contents/Resources/data/gfx40
	mkdir -p $(bundle_name)/Contents/Resources/data/gfx48
	cp $(top_builddir)/data/gfx48/*.png $(bundle_name)/Contents/Resources/data/gfx48
	cp $(top_builddir)/data/gfx48/*.jpg $(bundle_name)/Contents/Resources/data/gfx48
	mkdir -p $(bundle_name)/Contents/Resources/data/schemas
	cp $(top_builddir)/data/schemas/*.xml $(bundle_name)/Contents/Resources/data/schemas
	cp $(top_builddir)/data/schemas/*.xsd $(bundle_name)/Contents/Resources/data/schemas
	mkdir -p $(bundle_name)/Contents/Resources/data/music
	mkdir -p $(bundle_name)/Contents/Resources/data/music/menu
	cp $(top_builddir)/data/music/menu/*.s3m $(bundle_name)/Contents/Resources/data/music/menu
	cp $(top_builddir)/data/music/menu/*.ogg $(bundle_name)/Contents/Resources/data/music/menu
	mkdir -p $(bundle_name)/Contents/Resources/data/soundsets
	mkdir -p $(bundle_name)/Contents/Resources/data/soundsets/enigma
	cp $(top_builddir)/data/soundsets/enigma/*.wav $(bundle_name)/Contents/Resources/data/soundsets/enigma
	mkdir -p $(bundle_name)/Contents/Resources/data/fonts
	cp $(top_builddir)/data/fonts/*.png $(bundle_name)/Contents/Resources/data/fonts
	cp $(top_builddir)/data/fonts/*.bmf $(bundle_name)/Contents/Resources/data/fonts
	cp $(top_builddir)/data/fonts/*.ttf $(bundle_name)/Contents/Resources/data/fonts
	mkdir -p $(bundle_name)/Contents/Frameworks
	cp -R /Library/Frameworks/SDL.framework $(bundle_name)/Contents/Frameworks/
	cp -R /Library/Frameworks/SDL_image.framework $(bundle_name)/Contents/Frameworks/
	cp -R /Library/Frameworks/SDL_mixer.framework $(bundle_name)/Contents/Frameworks/
	cp -R /Library/Frameworks/SDL_ttf.framework $(bundle_name)/Contents/Frameworks/
	for cat in $(ALL_LINGUAS); do \
	  dir=$(bundle_name)/Contents/Resources/locale/$$cat/LC_MESSAGES; \
	  mkdir -p $$dir; \
	  echo "installing $$cat as $$dir/enigma.mo"; \
	  cp $(top_builddir)/po/$$cat.gmo $$dir/enigma.mo; \
	done

# Special target to copy the binary to Enigma.app/Contents/MacOS.
.PHONY: bundle-fw
bundle-fw: enigma-fw-mosx
	cp enigma-fw $(bundle_name)/Contents/MacOS/enigma
	strip $(bundle_name)/Contents/MacOS/enigma
.PHONY: bundle-doc
bundle-doc:
	-rm -rf $(bundle_doc)
	mkdir -p $(bundle_doc)/images/flags25x15
	mkdir -p $(bundle_doc)/reference/images
	mkdir -p $(bundle_doc)/manual/images
	cp $(top_builddir)/README $(bundle_doc)/
	cp $(top_builddir)/COPYING $(bundle_doc)/
	cp $(top_builddir)/CHANGES $(bundle_doc)/
	cp $(top_builddir)/ACKNOWLEDGEMENTS $(bundle_doc)/
	cp $(top_builddir)/etc/README-SDL.txt $(bundle_doc)/
	cp $(top_builddir)/doc/index.html $(bundle_doc)/
	mkalias -r $(bundle_doc)/index.html $(bundle_root)/EnigmaDocs.html
	cp $(top_builddir)/doc/gpl.txt $(bundle_doc)/
	cp $(top_builddir)/doc/lgpl.txt $(bundle_doc)/
	cp $(top_builddir)/doc/images/enigma.css $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/nav_enigma.gif $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/nav_cornerul.gif $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/nav_cornerur.gif $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/favicon.png $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/menu_bg.jpg $(bundle_doc)/images/
	cp $(top_builddir)/doc/images/flags25x15/*.png $(bundle_doc)/images/flags25x15/
	cp $(top_builddir)/doc/reference/ant_lua.txt $(bundle_doc)/reference/
	cp $(top_builddir)/doc/reference/sounds.txt $(bundle_doc)/reference/
	cp $(top_builddir)/doc/reference/soundset.lua $(bundle_doc)/reference/
	cp $(top_builddir)/doc/reference/lua2xml $(bundle_doc)/reference/
	cp $(top_builddir)/doc/reference/xml2lua $(bundle_doc)/reference/
	cp $(top_builddir)/doc/manual/images/*.png $(bundle_doc)/manual/images/
	cp $(top_builddir)/doc/manual/*.html $(bundle_doc)/manual/
	cp $(top_builddir)/doc/reference/images/*.png $(bundle_doc)/reference/images/
	cp $(top_builddir)/doc/reference/*.html $(bundle_doc)/reference/
.PHONY: enigma-fw-mosx
enigma-fw-mosx: $(enigma_OBJECTS) $(enigma_DEPENDENCIES)
	$(CXX) $(LDFLAGS) -o enigma-fw $(enigma_OBJECTS) $(enigma_DEPENDENCIES) $(static_prefix)/lib/libintl.a /usr/lib/libiconv.dylib /usr/lib/libcurl.dylib $(static_prefix)/lib/libxerces-c.a -L$(static_prefix)/lib -lsdlmain -lz -framework SDL -framework SDL_image -framework SDL_mixer -framework Cocoa -framework OpenGL -framework SDL_ttf $(static_prefix)/lib/libpng.a 

# Special target to make a disk image of the bundled app
.PHONY: bundle-dmg
bundle-dmg:
	hdiutil create  -ov -srcfolder $(bundle_root) -volname Enigma -imagekey zlib-level=6 $(top_builddir)/etc/enigma.dmg

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
